{"version":3,"sources":["templates/langchain/application/application.py","templates/langchain/custom_chain_field/custom_chain_field.py","templates/langchain/custom_chat_message_field/custom_chat_message_field.py","templates/langchain/custom_chat_model_field/custom_chat_model_field.py","templates/langchain/custom_chat_prompt_field/custom_chat_prompt_field.py","templates/langchain/custom_embedding_field/custom_embedding_field.py","templates/langchain/custom_llm_field/custom_llm_field.py","templates/langchain/custom_loader_field/custom_loader_field.py","templates/langchain/custom_memory_field/custom_memory_field.py","templates/langchain/custom_prompt_field/custom_prompt_field.py","templates/langchain/custom_retriever_field/custom_retriever_field.py","templates/langchain/custom_splitter_field/custom_splitter_field.py","templates/langchain/custom_tool_field/custom_tool_field.py","templates/langchain/custom_util_field/custom_util_field.py","templates/langchain/custom_vectorstore_field/custom_vectorstore_field.py","images sync nonrecursive /.*","images/LearningRateJustRight.svg","images/LearningRateTooLarge.svg","images/LearningRateTooSmall.svg","templates sync /.*.py","templates/langchain/application sync /.*.py","templates sync /^/.*$","components/icon.jsx","components/topmenu.jsx","utils.ts","components/leftmenu.jsx","components/layout.jsx","components/toast-message.jsx","Blockly/BlocklyComponent.jsx","Blockly/index.ts","fields/BaseField.jsx","components/modal.jsx","forms/fields/number-field.jsx","forms/fields/select-field.jsx","forms/fields/input-field.jsx","forms/fields/boolean-field.jsx","components/source-replacer.jsx","components/image-carousel.jsx","components/help-card.jsx","forms/chain-form.jsx","fields/ChainField.jsx","forms/chatmessage-form.jsx","fields/ChatMessageField.jsx","forms/chatmodel-form.jsx","fields/ChatModelField.jsx","forms/chatprompt-form.jsx","fields/ChatPromptField.jsx","forms/embedding-form.jsx","fields/EmbeddingField.jsx","forms/llm-form.jsx","fields/LlmField.jsx","forms/loader-form.jsx","fields/LoaderField.jsx","forms/memory-form.jsx","fields/MemoryField.jsx","forms/retriever-form.jsx","fields/RetrieverField.jsx","forms/splitter-form.jsx","fields/SplitterField.jsx","forms/tool-form.jsx","fields/ToolField.jsx","forms/util-form.jsx","fields/UtilField.jsx","forms/vectorstore-form.jsx","fields/VectorStoreField.jsx","forms/fields/textarea-field.jsx","forms/prompt-form.jsx","fields/PromptField.jsx","blocks/customblocks.ts","generator/generator.ts","blocks/ml-blocks.ts","generator/ml-blocks-generator.ts","generator/handlebars-helpers.ts","generator/ml-blocks-generator-python.ts","types.ts","context.ts","App.tsx","serviceWorker.ts","config.ts","local-store-context.ts","remote-store-context.ts","index.tsx"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Icon","props","icon","size","className","color","defaultProps","TopMenu","onItemSelected","isBusy","topMenu","menu","useState","bg","variant","Brand","href","Spinner","animation","faRobot","style","Toggle","Collapse","Nav","m","i","options","length","DropdownButton","key","as","ButtonGroup","title","label","j","Item","eventKey","onClick","Link","link","srcImages","ctx","names","files","require","srcTemplates","srcAppTemplates","newApp","uuidv4","name","moment","format","content","json","hydrate","value","btoa","JSON","stringify","dehydrate","parse","atob","replace","labelize","toUpperCase","substring","$1","parseObject","isArray","debugInfo","obj","console","log","trim","split","filter","s","forEach","jsonObj","push","assign","evalSource","block","root","properties","statements","appendSufix","isPython","undefined","template","isRemote","Handlebars","source","rootObj","Array","p","isVariable","Blockly","variableDB_","getName","getFieldValue","fieldName","NAME_TYPE","transform","propertyName","statements_block_statements","statementToCode","blockStatements","bs","augmentedSrc","window","api","output","type","order","isPending","getComponentByName","then","component","find","assignment","compileComponent","results","raiseOnDone","buildSource","replacements","annotations","nodeTypes","nodeName","nodes","DOMParser","parseFromString","body","childNodes","foundAnnotations","node","innerText","nt","outerHTML","description","xmlFields","xml","fields","doc","fieldList","querySelectorAll","field","attributes","nodeValue","textContent","f","includes","platformTemplates","platforms","loadContent","tpls","ord","fileName","nameParts","platform","parentBlock","tpl","t","platformItem","newIdx","templates","newTemplate","fetch","res","text","groupTemplatesByParent","concatTemplates","selectorTypes","selector","selectorRef","blockTemplates","blockItem","blockName","selectorType","st","tf","LeftMenu","onItemRemoved","onItemClonned","items","mi","isActive","setIsActive","ListGroup","action","disabled","marginLeft","backgroundColor","array","flavor","active","localStorage","getItem","onSelect","index","resetState","handleActiveState","padding","Row","marginRight","Col","lg","faFileCode","toLowerCase","Button","border","width","height","float","faTrashAlt","faClone","Layout","children","leftMenu","paddingLeft","paddingRight","textAlign","marginTop","display","Date","getFullYear","ToastMessage","message","onClose","show","setShow","Toast","position","bottom","right","zIndex","delay","autohide","Header","Body","setLocale","locale","BlocklyComponent","this","initialXml","rest","primaryWorkspace","inject","blocklyDiv","toolbox","Xml","domToWorkspace","textToDom","Fragment","ref","xmlns","is","React","Component","Block","createElement","BaseField","getPlatform","sourceBlock_","workspace","topBlocks_","inputList","fieldRow","fr","value_","getAppTypeAndFlavor","div_","getContentDiv","ReactDOM","render","showPositionedByField","dropdownDispose_","bind","unmountComponentAtNode","FieldRenderComponent","register","ModalDialog","onCancel","Modal","onHide","scrollable","closeButton","NumberField","prop","data","isNameValue","onValueChange","Form","Group","Label","Control","min","max","step","defaultValue","onChange","target","required","SelectField","isDatasetField","isValid","setIsValid","hideIfSingleOption","sort","a","b","k","optionName","optionTitle","option","RegExp","test","InputField","BooleanField","Check","checked","SourceReplacer","maxWords","join","r","url","elements","replPositions","el","start","indexOf","end","pos","stopPropagation","open","focus","windowOpen","bold","strong","italic","ImageCarousel","Carousel","images","image","item","srcImg","src","alt","Caption","left","paddingTop","paddingBottom","opacity","HelpCard","Card","marginBottom","itemProperties","settings","sett","arrProps","ip","refProperty","arrProp","ap","ChainForm","onSave","onShowHelp","validated","setValidated","setData","visibleHelp","setVisibleHelp","handleSettings","tmpSetts","splice","fontSize","faChevronCircleLeft","faInfoCircle","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","select","changedData","updatedValue","dp","default","updateSettings","number","input","checkbox","isChecked","ModalForm","setSize","visible","ChainField","SERIALIZABLE","values","setValue","hideIfOwner","fieldElement","bt","ChatMessageForm","ChatMessageField","ChatModelForm","ChatModelField","ChatPromptForm","ChatPromptField","EmbeddingForm","EmbeddingField","LlmForm","LlmField","LoaderForm","LoaderField","MemoryForm","MemoryField","RetrieverForm","RetrieverField","SplitterForm","SplitterField","ToolForm","ToolField","UtilForm","UtilField","VectorStoreForm","VectorStoreField","TextAreaField","rows","PromptForm","textarea","PromptField","customChatPromptFieldDef","customLlmFieldDef","customChainFieldDef","customToolFieldDef","customUtilFieldDef","customChatModelFieldDef","customChatMessageFieldDef","customLoaderFieldDef","customVectorstoreFieldDef","customSplitterFieldDef","customEmbeddingFieldDef","customMemoryFieldDef","customRetrieverFieldDef","customPromptFieldDef","def","customBaseField","init","jsonInit","setStyle","customChatPromptField","setColour","customLlmField","customChainField","customToolField","customUtilField","customChatModelField","customChatMessageField","customLoaderField","customVectorstoreField","customSplitterField","customEmbeddingField","customMemoryField","customRetrieverField","customPromptField","Set","n","appendDummyInput","appendField","tplName","appendStatementInput","setCheck","setTooltip","setHelpUrl","setPreviousStatement","setNextStatement","eq","v1","v2","ne","lt","gt","lte","gte","and","prototype","every","call","arguments","Boolean","or","slice","some","parseInt","boolVal","getPlatformTemplate","db","blockDB_","eRunMode","DataContext","createContext","whoAmI","store","getApplications","setApplications","apps","getSelectedApplicationId","setSelectedApplicationId","getTopMenu","getLeftMenu","setLeftMenu","buildLangChain","App","simpleWorkspace","useContext","buildToastAction","isVisible","defaultToastAction","applications","selectedApplicationId","app","application","setApplication","setInitialXml","setIsBusy","toastAction","setToastAction","saveState","selAppId","clearBusy","loadApplication","document","location","reload","addApplication","existingApp","setTimeout","onOutputDone","outputList","arrayItems","arrayItemName","chainItem","propName","prompts","innerItem","innerPropName","innerProp","out","lines","mimeType","extension","downloader","saveApplication","saveAsNotebook","BlocklyPython","workspaceToCode","workspaceToDom","domToText","tmpApps","downloadApplications","origName","blob","Blob","URL","createObjectURL","uri","download","click","downloadUri","revokeObjectURL","onload","ev","raisedEvent","Events","Ui","toJson","matches","newValue","isSingleApp","selApp","tmpApp","addChangeListener","theme","BlocklyCore","Dark","readOnly","trashcan","media","move","scrollbars","drag","wheel","zoom","controls","startScale","maxScale","minScale","scaleSpeed","grid","spacing","snap","hostname","match","config","runMode","Local","apiUrl","sampleApplications","_getApplications","setItem","getDefaultApp","_leftMenu","faFolderOpen","_requestOptions","method","mode","headers","localDataContext","faPlusSquare","faLightbulb","faFileImage","faArrowAltCircleDown","faSave","reqOptions","remoteDataContext","LocalDataContext","dataContext","RemoteDataContext","Provider","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5b2cd5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/application.985221a1.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_chain_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_chat_message_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_chat_model_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_chat_prompt_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_embedding_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_llm_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_loader_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_memory_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_prompt_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_retriever_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_splitter_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_tool_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_util_field.79b9178d.py\";","module.exports = __webpack_public_path__ + \"static/media/custom_vectorstore_field.79b9178d.py\";","var map = {\n\t\"./LearningRateJustRight.svg\": 152,\n\t\"./LearningRateTooLarge.svg\": 153,\n\t\"./LearningRateTooSmall.svg\": 154\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 151;","module.exports = __webpack_public_path__ + \"static/media/LearningRateJustRight.1088adc2.svg\";","module.exports = __webpack_public_path__ + \"static/media/LearningRateTooLarge.3b8a0369.svg\";","module.exports = __webpack_public_path__ + \"static/media/LearningRateTooSmall.9d16167b.svg\";","var map = {\n\t\"./langchain/application/application.py\": 81,\n\t\"./langchain/custom_chain_field/custom_chain_field.py\": 93,\n\t\"./langchain/custom_chat_message_field/custom_chat_message_field.py\": 94,\n\t\"./langchain/custom_chat_model_field/custom_chat_model_field.py\": 95,\n\t\"./langchain/custom_chat_prompt_field/custom_chat_prompt_field.py\": 96,\n\t\"./langchain/custom_embedding_field/custom_embedding_field.py\": 97,\n\t\"./langchain/custom_llm_field/custom_llm_field.py\": 98,\n\t\"./langchain/custom_loader_field/custom_loader_field.py\": 99,\n\t\"./langchain/custom_memory_field/custom_memory_field.py\": 100,\n\t\"./langchain/custom_prompt_field/custom_prompt_field.py\": 101,\n\t\"./langchain/custom_retriever_field/custom_retriever_field.py\": 102,\n\t\"./langchain/custom_splitter_field/custom_splitter_field.py\": 103,\n\t\"./langchain/custom_tool_field/custom_tool_field.py\": 104,\n\t\"./langchain/custom_util_field/custom_util_field.py\": 105,\n\t\"./langchain/custom_vectorstore_field/custom_vectorstore_field.py\": 106\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 155;","var map = {\n\t\"./application.py\": 81\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 156;","var map = {\n\t\"./langchain/application/application.py\": 81,\n\t\"./langchain/custom_chain_field/custom_chain_field.py\": 93,\n\t\"./langchain/custom_chat_message_field/custom_chat_message_field.py\": 94,\n\t\"./langchain/custom_chat_model_field/custom_chat_model_field.py\": 95,\n\t\"./langchain/custom_chat_prompt_field/custom_chat_prompt_field.py\": 96,\n\t\"./langchain/custom_embedding_field/custom_embedding_field.py\": 97,\n\t\"./langchain/custom_llm_field/custom_llm_field.py\": 98,\n\t\"./langchain/custom_loader_field/custom_loader_field.py\": 99,\n\t\"./langchain/custom_memory_field/custom_memory_field.py\": 100,\n\t\"./langchain/custom_prompt_field/custom_prompt_field.py\": 101,\n\t\"./langchain/custom_retriever_field/custom_retriever_field.py\": 102,\n\t\"./langchain/custom_splitter_field/custom_splitter_field.py\": 103,\n\t\"./langchain/custom_tool_field/custom_tool_field.py\": 104,\n\t\"./langchain/custom_util_field/custom_util_field.py\": 105,\n\t\"./langchain/custom_vectorstore_field/custom_vectorstore_field.py\": 106\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 157;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Icon = (props) => {\r\n    const { icon, size, className, color } = props;\r\n\r\n    return (\r\n        <FontAwesomeIcon\r\n            icon={icon} \r\n            size={size} \r\n            className={className}\r\n            color={color} />\r\n    );\r\n}\r\nIcon.propTypes = {\r\n    icon: PropTypes.object.isRequired,\r\n    size: PropTypes.string,\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n}\r\nIcon.defaultProps = {\r\n    size: \"lg\",\r\n    className: \"mr-2\",\r\n    color: \"#666\",\r\n}\r\n\r\nexport default Icon;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport NavBar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport DropDown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\n\r\nimport { faRobot } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Icon from './icon';\r\n\r\nconst TopMenu = ({ onItemSelected, isBusy, menu: topMenu }) => {\r\n    const [menu,] = useState(topMenu);\r\n\r\n    return (\r\n        <NavBar bg=\"dark\" variant=\"dark\">\r\n            <NavBar.Brand href=\"#home\">\r\n                {isBusy ? <Spinner animation=\"grow\" /> : <Icon icon={faRobot} size=\"lg\" />}\r\n                <span style={{color: `#ccc`}}>LangChain Applications</span>\r\n            </NavBar.Brand>\r\n            <NavBar.Toggle />\r\n            <NavBar.Collapse className=\"justify-content-end\">\r\n                <Nav className=\"ml-auto\">\r\n                    {menu.map((m, i) => {\r\n                        if (!!m.options && m.options.length) {\r\n                            return (\r\n                                <DropdownButton key={`topMenu${i}`} as={ButtonGroup} title={m.label} size=\"sm\" variant=\"dark\">\r\n                                    {m.options.map((o, j) => (\r\n                                        <DropDown.Item key={`topInnerMenu${j}`} variant=\"dark\" eventKey={j} onClick={\r\n                                            e => onItemSelected(o, j)\r\n                                        }>\r\n                                            <Icon icon={o.icon} size=\"sm\" color=\"primary\" /> <small>{o.label}</small>\r\n                                        </DropDown.Item>\r\n                                    ))}\r\n\r\n                                </DropdownButton>\r\n                            )\r\n                        }\r\n                        else return (\r\n                            <Nav.Link key={`topMenu${i}`} variant=\"dark\" href={m.link} onClick={\r\n                                e => onItemSelected(m, i)\r\n                            }>\r\n                                <Icon icon={m.icon} size=\"sm\" color=\"primary\" /><small>{m.label}</small>\r\n                            </Nav.Link>\r\n                        )\r\n                    })}\r\n                </Nav>\r\n            </NavBar.Collapse>\r\n        </NavBar>\r\n    )\r\n}\r\nTopMenu.propTypes = {\r\n    onItemSelected: PropTypes.func.isRequired,\r\n    menu: PropTypes.array.isRequired,\r\n    isBusy: PropTypes.bool.isRequired,\r\n}\r\nTopMenu.defaultProps = {\r\n    isBusy: false,\r\n}\r\n\r\nexport default TopMenu;\r\n","/// <reference path=\"../node_modules/blockly/blockly.d.ts\"/>\r\n/// <reference path=\"../node_modules/blockly/python.js\"/>\r\n/// <reference path=\"../node_modules/blockly/core.js\"/>\r\n\r\nimport moment from 'moment';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport * as Handlebars from 'handlebars';\r\n\r\nimport * as Blockly from 'blockly/core';\r\nimport 'blockly/python';\r\nimport 'blockly/javascript';\r\nimport { IBlockProperty, IStatement, IAppProp } from './types';\r\n\r\nconst APPLICATIONS_KEY = 'lc_blockly_applications';\r\nconst SELECTED_APPLICATION_ID_KEY = 'lc_blockly_selectedApplicationId';\r\n\r\nconst FIELDS_SEPARATOR = ';'\r\nconst LIST_SEPARATOR = ','\r\nconst PROPERTY_SEPARATOR = '='\r\n\r\nconst DEFAULT_CONTENT = `<xml xmlns=\"http://www.w3.org/1999/xhtml\">\r\n    <block type=\"application\" deletable=\"false\" x=\"0\" y=\"0\"></block>\r\n  </xml>`;\r\n\r\nconst srcImages = (ctx => {\r\n    const keys = ctx.keys();\r\n    return { names: keys, files: keys.map(ctx) };\r\n})(require.context('./images', false, /.*/));\r\n\r\nconst srcTemplates = (ctx => {\r\n    const keys = ctx.keys();\r\n    return { names: keys, files: keys.map(ctx) };\r\n})(require.context('./templates', true, /.*.py/));\r\n\r\nconst srcAppTemplates = (ctx => {\r\n    const keys = ctx.keys();\r\n    return keys;\r\n})(require.context('./templates/langchain/application', true, /.*.py/));\r\n\r\nconst newApp = () => {\r\n    return {\r\n        id: uuidv4(),\r\n        name: `Application-` + moment().format('MM-DD-YY:HH:mm:ss'),\r\n        content: DEFAULT_CONTENT,\r\n        json: {}\r\n    };\r\n}\r\n\r\nconst hydrate = (value: any) => btoa(JSON.stringify(value));\r\nconst dehydrate = (value: string) => JSON.parse(atob(value).replace(/\\\\\"/g, `'`).replace(/\\\\/g, ``));\r\n\r\nconst labelize = (value: string) => value\r\n    ? `${value[0].toUpperCase()}${value.substring(1).replace(/[A-Z]/g, (m, $1) => ' ' + m).replace(/[_]/g, (m, $1) => ' ')}`\r\n    : null;\r\n\r\nconst parseObject = (value: any, isArray = false, debugInfo = false) => {\r\n    const obj = isArray ? [] : {};\r\n    if (!value) return obj;\r\n    if (debugInfo) console.log('@parse', value, typeof value);\r\n    value\r\n        .trim()\r\n        .split('|')\r\n        .filter((s: string) => s.trim().length)\r\n        .forEach((s: string) => {\r\n            if (debugInfo) console.log('@each', s);\r\n            const jsonObj = JSON.parse(s);\r\n            if (debugInfo) console.log('@each json', jsonObj);\r\n            if (isArray) (obj as any).push(jsonObj)\r\n            else Object.assign(obj, jsonObj);\r\n            if (debugInfo) console.log('@obj', obj);\r\n        })\r\n    return obj;\r\n}\r\n\r\nconst evalSource = (block: any, root: any, properties: IBlockProperty[], statements: IStatement[] = null, isArray = false, appendSufix = true) => {\r\n    const isPython = block.template !== undefined;\r\n    const template = isPython && !block.template.isRemote\r\n        ? Handlebars.compile(block.template.content)\r\n        : null;\r\n    const source: any = {};\r\n    let rootObj = source;\r\n    if (root) {\r\n        rootObj = source[root] = isArray ? [] : {};\r\n    }\r\n\r\n    if (properties && Array.isArray(properties)) {\r\n        properties.forEach(p => {\r\n            const value = !!p.isVariable && p.isVariable\r\n                ? isPython\r\n                    ? Blockly.Python.variableDB_.getName(block.getFieldValue(p.fieldName), Blockly.Variables.NAME_TYPE)\r\n                    : Blockly.JavaScript.variableDB_.getName(block.getFieldValue(p.fieldName), Blockly.Variables.NAME_TYPE)\r\n                : !!p.transform\r\n                    ? p.transform(block.getFieldValue(p.fieldName))\r\n                    : block.getFieldValue(p.fieldName);\r\n            rootObj[p.propertyName] = value;\r\n        });\r\n    }\r\n\r\n    if (statements && Array.isArray(statements)) {\r\n        statements.forEach(s => {\r\n            const statements_block_statements = isPython\r\n                ? Blockly.Python.statementToCode(block, s.fieldName)\r\n                : Blockly.JavaScript.statementToCode(block, s.fieldName);\r\n            const blockStatements = parseObject(statements_block_statements, s.isArray) as any;\r\n            if (s.isArray) blockStatements.forEach((bs: any) => rootObj.push(bs));\r\n            else Object.assign(rootObj, blockStatements);\r\n        });\r\n    }\r\n\r\n    if (isPython) {\r\n        const augmentedSrc = !!window['appProps'] ? { ...window['appProps'], ...source } : source;\r\n        if (block.template.isRemote) {\r\n            const api = window['api'];\r\n\r\n            const output = {\r\n                type: block.type,\r\n                order: block.template.order,\r\n                content: null,\r\n                source,\r\n                isPending: true,\r\n            };\r\n            window['output'].push(output);\r\n\r\n            api.getComponentByName(block.template.name)\r\n                .then(component => {\r\n                    if (!!component) {\r\n                        if (properties && Array.isArray(properties)) {\r\n                            const prop = properties.find(p => !!p.assignment);\r\n                            prop.assignment(component, augmentedSrc);\r\n                        }\r\n                        api.compileComponent(component)\r\n                            .then(json => {\r\n                                output.content = json.results;\r\n                                output.isPending = false;\r\n                                window['onOutputDone'](window['output']);\r\n                            });\r\n                    }\r\n                });\r\n        }\r\n        else {\r\n            window['output'].push({\r\n                type: block.type,\r\n                order: block.template.order,\r\n                content: template(augmentedSrc),\r\n                source,\r\n                isPending: false\r\n            });\r\n            if (!!block.raiseOnDone) window['onOutputDone'](window['output']);\r\n        }\r\n    }\r\n\r\n    var code = JSON.stringify(source);\r\n    return code + (appendSufix ? '|' : '');\r\n}\r\n\r\nconst buildSource = (value: string, replacements = [], annotations = []) => {\r\n    const nodeTypes = [\r\n        { nodeName: \"B\", type: \"bold\" },\r\n        { nodeName: \"I\", type: \"italic\" },\r\n        { nodeName: \"S\", type: \"strong\" },\r\n        { nodeName: \"A\", type: \"a\" },\r\n    ];\r\n    const nodes = new DOMParser().parseFromString(value, \"text/html\").body.childNodes;\r\n    const foundAnnotations = [];\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        const node = nodes[i] as any;\r\n        if (node.nodeName !== \"#text\") {\r\n            foundAnnotations.push(({\r\n                label: node.innerText,\r\n                type: nodeTypes.find(nt => nt.nodeName === node.nodeName).type\r\n            }));\r\n            value = value.replace(node.outerHTML, node.innerText);\r\n        }\r\n    }\r\n    return {\r\n        description: value,\r\n        replacements,\r\n        annotations: annotations.length\r\n            ? annotations\r\n            : foundAnnotations\r\n    }\r\n}\r\n\r\nconst xmlFields = (xml: string, fields: string[]): IAppProp[] => {\r\n    const doc: Document = new DOMParser().parseFromString(xml, \"text/html\");\r\n    const fieldList = [...doc.querySelectorAll(\"field\") as any]\r\n        .map(field => ({\r\n            name: field.attributes[0].nodeValue,\r\n            value: field.textContent,\r\n        }))\r\n        .filter(f => fields.includes(f.name));\r\n    return fieldList.length\r\n        ? fieldList\r\n        : [\r\n            {\r\n                name: 'TRAIN',\r\n                value: 'PLATFORM'\r\n            },\r\n            {\r\n                name: 'FLAVOR',\r\n                value: 'LANGCHAIN'\r\n            }\r\n        ];\r\n}\r\n\r\nconst platformTemplates = (platforms = [], loadContent = false) => {\r\n    const tpls = [\r\n        { name: \"application\", order: 0 },\r\n        { name: \"custom_dataset_field\", order: 225 },\r\n        { name: \"plot_splitted_data\", order: 300 },\r\n        { name: \"transformations\", order: 200 },\r\n        { name: \"custom_transformation_field\", order: 225 },\r\n        { name: \"dataset_training\", order: 500 },\r\n        { name: \"callbacks\", order: 525 },\r\n        { name: \"custom_callback_field\", order: 550 },\r\n        { name: \"custom_training_field\", order: 575 },\r\n        { name: \"image_classification_transfer_learning\", order: 600 },\r\n        { name: \"plot_evaluated_data\", order: 700 },\r\n        { name: \"plot_confusion_matrix\", order: 800 },\r\n        { name: \"export\", order: 900 },\r\n        { name: 'custom_chain_field', order: 1100 },\r\n        { name: 'custom_llm_field', order: 1125 },\r\n        { name: 'custom_tool_field', order: 1150 },\r\n        { name: 'custom_util_field', order: 1175 },\r\n        { name: 'custom_chat_prompt_field', order: 1200 },\r\n        { name: 'custom_chat_model_field', order: 1225 },\r\n        { name: 'custom_chat_message_field', order: 1250 },\r\n        { name: 'custom_loader_field', order: 1275 },\r\n        { name: 'custom_vectorstore_field', order: 1300 },\r\n        { name: 'custom_splitter_field', order: 1325 },\r\n        { name: 'custom_embedding_field', order: 1350 },\r\n        { name: 'custom_memory_field', order: 1375 },\r\n        { name: 'custom_retriever_field', order: 1400 },\r\n        { name: 'custom_prompt_field', order: 1425 },\r\n    ];\r\n\r\n    srcTemplates.names.forEach((f, ord) => {\r\n        const fileName = require(`./templates/${f.substring(2)}`);\r\n        if (typeof fileName !== 'string') return;\r\n\r\n        const nameParts = f.split('/');\r\n        const platform = nameParts[1];\r\n        const parentBlock = nameParts[2];\r\n        const name = nameParts[nameParts.length - 1].split('.')[0];\r\n        const tpl = tpls.find(t => t.name === name);\r\n        const order = tpl\r\n            ? tpl.order\r\n            : tpls.find(t => t.name === parentBlock).order + ord;\r\n\r\n        let platformItem = platforms.find(p => p.name === platform);\r\n        if (!platformItem) {\r\n            const newIdx = platforms.push({ name: platform, templates: [] });\r\n            platformItem = platforms[newIdx - 1];\r\n        }\r\n\r\n        const newTemplate = {\r\n            name,\r\n            parentBlock,\r\n            platform,\r\n            order,\r\n            isRemote: false,\r\n        };\r\n\r\n        if (loadContent) {\r\n            fetch(fileName)\r\n                .then(res => res.text())\r\n                .then(content => platformItem.templates.push({ ...newTemplate, content }));\r\n        } else {\r\n            platformItem.templates.push(newTemplate);\r\n        }\r\n    });\r\n\r\n    return platforms;\r\n}\r\n\r\nconst groupTemplatesByParent = (platforms, concatTemplates = null) => {\r\n    const selectorTypes = [\r\n        { name: \"application\" },\r\n        { name: \"custom_dataset_field\", selector: \".*\", selectorRef: \"name\" },\r\n        { name: \"plot_splitted_data\" },\r\n        { name: \"transformations\" },\r\n        { name: \"custom_transformation_field\", selector: \".*\", selectorRef: \"type\" },\r\n        { name: \"dataset_training\" },\r\n        { name: \"callbacks\" },\r\n        { name: \"custom_callback_field\", selector: \".*\", selectorRef: \"type\" },\r\n        { name: \"custom_training_field\", selector: \"true\", selectorRef: \"transferLearning\" },\r\n        { name: \"plot_evaluated_data\" },\r\n        { name: \"plot_confusion_matrix\" },\r\n        { name: \"export\" },\r\n        { name: 'custom_chain_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_llm_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_tool_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_util_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_chat_prompt_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_chat_model_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_chat_message_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_loader_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_vectorstore_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_splitter_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_embedding_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_memory_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_retriever_field', selector: \".*\", selectorRef: \"type\" },\r\n        { name: 'custom_prompt_field', selector: \".*\", selectorRef: \"type\" },\r\n    ];\r\n    const blockTemplates = [];\r\n    platforms.forEach(p => {\r\n        p.templates.forEach(t => {\r\n            let blockItem = blockTemplates.find(p => p.blockName === t.parentBlock);\r\n            if (!blockItem) {\r\n                const newIdx = blockTemplates.push({ blockName: t.parentBlock, templates: [] });\r\n                blockItem = blockTemplates[newIdx - 1];\r\n            }\r\n            const selectorType = selectorTypes.find(st => st.name === t.parentBlock);\r\n            if (!blockItem.templates.find(tf => tf.name === t.name && tf.platform === t.platform)) {\r\n                blockItem.templates.push({\r\n                    name: t.name,\r\n                    selector: selectorType.selector,\r\n                    selectorRef: selectorType.selectorRef,\r\n                    platform: t.platform,\r\n                    isRemote: false,\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    return !!concatTemplates\r\n        ? [...blockTemplates, ...concatTemplates]\r\n        : blockTemplates;\r\n}\r\n\r\n\r\nexport {\r\n    APPLICATIONS_KEY,\r\n    SELECTED_APPLICATION_ID_KEY,\r\n    FIELDS_SEPARATOR,\r\n    LIST_SEPARATOR,\r\n    PROPERTY_SEPARATOR,\r\n    DEFAULT_CONTENT,\r\n    newApp,\r\n    hydrate,\r\n    dehydrate,\r\n    labelize,\r\n    parseObject,\r\n    xmlFields,\r\n    evalSource,\r\n    srcImages,\r\n    srcTemplates,\r\n    srcAppTemplates,\r\n    buildSource,\r\n    platformTemplates,\r\n    groupTemplatesByParent,\r\n}\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { faFileCode, faTrashAlt, faClone } from \"@fortawesome/free-regular-svg-icons\";\r\nimport Icon from './icon';\r\nimport { xmlFields } from './../utils';\r\n\r\nconst LeftMenu = (props) => {\r\n    const { onItemSelected, onItemRemoved, onItemClonned } = props;\r\n    const [menu,] = useState(props.menu);\r\n    const [isActive, setIsActive] = useState(menu[0].items.map(mi => false));\r\n\r\n    const handleActiveState = (index) => {\r\n        const resetState = menu[0].items.map(mi => false);\r\n        resetState[index] = !isActive[index];\r\n        setIsActive(resetState);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {menu.map((m, i) =>\r\n                <ListGroup key={`leftMenu${i}`}>\r\n                    <ListGroup.Item action href={`#${m.label}`} disabled style={{ marginLeft: `-8px`, backgroundColor: `#1e1e1e` }}>\r\n                        <small>\r\n                            <strong style={{ color: `#98caff`}}>\r\n                                <Icon icon={m.icon} size=\"sm\" /> {m.label}\r\n                            </strong>\r\n                        </small>\r\n                    </ListGroup.Item>\r\n                    {m.items && Array.isArray(m.items) && m.items.map((mi, j, array) => {\r\n                        const fields = xmlFields(mi.content, [\"TRAIN\", \"FLAVOR\"]);\r\n                        const type = fields.find(f => f.name === 'TRAIN').value;\r\n                        const flavor = fields.find(f => f.name === 'FLAVOR').value;\r\n                        \r\n                        return (<ListGroup.Item key={`leftMenuItem${j}`} active={mi.id === localStorage.getItem(\"selectedApplicationId\")}\r\n                            action\r\n                            href={`#${mi.name}`}\r\n                            className={isActive[j] ? \"list-group-item.active\" : \"\"}\r\n                            onSelect={() => {\r\n                                handleActiveState(j);\r\n                                onItemSelected(mi, j);\r\n                            }}\r\n                            style={{ padding: 0 }}\r\n                        >\r\n                            <Row style={{ marginLeft: 0, marginRight: 0, backgroundColor: '#1e1e1e' }}>\r\n                                <Col lg={1}>\r\n                                    <Icon icon={faFileCode} size=\"sm\" />\r\n                                </Col>\r\n                                <Col>\r\n                                    <small style={{ color: `#63aeff` }}>{mi.name}</small>\r\n                                    <br />\r\n                                    <small style={{ color: `#ccc` }}>{type.toLowerCase()}: <i>{flavor.toLowerCase()}</i></small>\r\n                                </Col>\r\n                                <Col lg={5}>\r\n                                    <Button as=\"div\" size=\"sm\"\r\n                                        onClick={e => onItemRemoved(mi, j)}\r\n                                        style={{\r\n                                            backgroundColor: `Transparent`,\r\n                                            color: `#343a40`,\r\n                                            border: `0 solid white`,\r\n                                            width: `auto`,\r\n                                            height: `auto`,\r\n                                            float: `right`,\r\n                                        }}>\r\n                                        <Icon icon={faTrashAlt} size=\"sm\" />\r\n                                    </Button>\r\n                                    <Button as=\"div\" size=\"sm\"\r\n                                        onClick={e => onItemClonned(mi, j)}\r\n                                        style={{\r\n                                            backgroundColor: `Transparent`,\r\n                                            color: `#343a40`,\r\n                                            border: `0 solid white`,\r\n                                            width: `auto`,\r\n                                            height: `auto`,\r\n                                            float: `right`,\r\n                                        }}>\r\n                                        <Icon icon={faClone} size=\"sm\" />\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>)\r\n                    })}\r\n                </ListGroup>\r\n            )}\r\n        </>\r\n    )\r\n}\r\nLeftMenu.propTypes = {\r\n    onItemSelected: PropTypes.func.isRequired,\r\n    onItemRemoved: PropTypes.func.isRequired,\r\n    onItemClonned: PropTypes.func.isRequired,\r\n    menu: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default LeftMenu;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport TopMenu from './topmenu';\r\nimport LeftMenu from './leftmenu';\r\nimport \"./layout.css\";\r\n\r\nconst Layout = ({ children, onItemSelected, onItemRemoved, onItemClonned, topMenu, leftMenu, isBusy }) => {\r\n  return (\r\n    <>\r\n      <TopMenu onItemSelected={onItemSelected} menu={topMenu} isBusy={isBusy} />\r\n\r\n      <Row style={{ marginLeft: 0, marginRight: 0 }}>\r\n        <Col lg={3} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <LeftMenu onItemSelected={onItemSelected} onItemRemoved={onItemRemoved} onItemClonned={onItemClonned} menu={leftMenu} />\r\n        </Col>\r\n        <Col style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <main>{children}</main>\r\n        </Col>\r\n      </Row>\r\n      <footer style={{\r\n        textAlign: `center`,\r\n        width: `100%`,\r\n        marginTop: `auto`,\r\n        display: `block`\r\n      }}>\r\n        <small style={{ color: `#ccc`}}>© {new Date().getFullYear()}, Built by</small>\r\n        {` `}\r\n        <a href=\"https://migfig.github.io\">@migfig</a>\r\n      </footer>\r\n    </>\r\n  )\r\n}\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  onItemSelected: PropTypes.func.isRequired,\r\n  onItemRemoved: PropTypes.func.isRequired,\r\n  onItemClonned: PropTypes.func.isRequired,\r\n  topMenu: PropTypes.array.isRequired,\r\n  leftMenu: PropTypes.array.isRequired,\r\n  isBusy: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default Layout\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Toast from 'react-bootstrap/Toast';\r\nimport { faRobot } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from './icon';\r\n\r\nconst ToastMessage = ({ title, message, onClose }) => {\r\n    const [show, setShow] = useState(true);\r\n\r\n    return <Toast onClose={e => {\r\n            setShow(false);\r\n            onClose();\r\n        }} show={show}\r\n        style={{\r\n            position: `absolute`,\r\n            bottom: 0,\r\n            right: 0,\r\n            zIndex: 9000\r\n        }}\r\n        delay={3000} autohide>\r\n        <Toast.Header>\r\n            <Icon icon={faRobot} size=\"sm\" />\r\n            <strong className=\"mr-auto\">{title}</strong>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n            {message}\r\n        </Toast.Body>\r\n    </Toast>\r\n}\r\nToastMessage.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ToastMessage;\r\n","/**\r\n * @license\r\n * \r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Blockly React Component.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\nimport React from 'react';\r\nimport './BlocklyComponent.css';\r\n\r\nimport Blockly from 'blockly/core';\r\nimport locale from 'blockly/msg/en';\r\nimport 'blockly/blocks';\r\n\r\nBlockly.setLocale(locale);\r\n\r\nclass BlocklyComponent extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const { initialXml, children, ...rest } = this.props;\r\n        this.primaryWorkspace = Blockly.inject(\r\n            this.blocklyDiv,\r\n            {\r\n                toolbox: this.toolbox,\r\n                ...rest\r\n            },\r\n        );\r\n\r\n        if (initialXml) {\r\n            Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(initialXml), this.primaryWorkspace);\r\n        }\r\n    }\r\n\r\n    get workspace() {\r\n        return this.primaryWorkspace;\r\n    }\r\n\r\n    setXml(xml) {\r\n        Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(xml), this.primaryWorkspace);\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n\r\n        return <React.Fragment>\r\n            <div ref={e => this.blocklyDiv = e} id=\"blocklyDiv\" />\r\n            <xml xmlns=\"https://developers.google.com/blockly/xml\" is=\"blockly\" style={{ display: 'none' }} ref={(toolbox) => { this.toolbox = toolbox; }}>\r\n                {children}\r\n            </xml>\r\n        </React.Fragment>;\r\n    }\r\n}\r\n\r\nexport default BlocklyComponent;\r\n","/**\r\n * @license\r\n * \r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview XML wrappers for block, category, value, field and shadow.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\n import React from 'react';\r\nimport BlocklyComponent from './BlocklyComponent';\r\n\r\nexport default BlocklyComponent;\r\n\r\nconst Block = (p) => {\r\n    const { children, ...props } = p;\r\n    props.is = \"blockly\";\r\n    return React.createElement(\"block\", props, children);\r\n};\r\n\r\nconst Category = (p) => {\r\n    const { children, ...props } = p;\r\n    props.is = \"blockly\";\r\n    return React.createElement(\"category\", props, children);\r\n};\r\n\r\nconst Value = (p) => {\r\n    const { children, ...props } = p;\r\n    props.is = \"blockly\";\r\n    return React.createElement(\"value\", props, children);\r\n};\r\n\r\nconst Field = (p) => {\r\n    const { children, ...props } = p;\r\n    props.is = \"blockly\";\r\n    return React.createElement(\"field\", props, children);\r\n};\r\n\r\nconst Shadow = (p) => {\r\n    const { children, ...props } = p;\r\n    props.is = \"blockly\";\r\n    return React.createElement(\"shadow\", props, children);\r\n};\r\n\r\nexport { Block, Category, Value, Field, Shadow }","/**\r\n * @license\r\n * \r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Sample React Blockly Field.\r\n * This shows you how to create a custom Blockly field that renders a React\r\n * component inside of the dropdown div when shown.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as Blockly from 'blockly/core';\r\n\r\nclass BaseField extends Blockly.Field {\r\n\r\n  static fromJson(options) {\r\n    return new BaseField(options['text']);\r\n  }\r\n\r\n  getPlatform = () =>\r\n    this.sourceBlock_\r\n      .workspace\r\n      .topBlocks_[0]\r\n      .inputList[0]\r\n      .fieldRow.find(fr => fr.name === \"PLATFORM\")\r\n      .value_\r\n      .toLowerCase();\r\n\r\n  getAppTypeAndFlavor = () => {\r\n    const type = window['TRAIN'];\r\n    const flavor = window['FLAVOR'];\r\n    return { type, flavor }\r\n  }\r\n\r\n  showEditor_() {\r\n    this.div_ = Blockly.DropDownDiv.getContentDiv();\r\n    ReactDOM.render(this.render(),\r\n      this.div_);\r\n\r\n    Blockly.DropDownDiv.showPositionedByField(\r\n      this, this.dropdownDispose_.bind(this));\r\n  }\r\n\r\n  dropdownDispose_() {\r\n    ReactDOM.unmountComponentAtNode(this.div_);\r\n  }\r\n\r\n  render() {\r\n    return <FieldRenderComponent />\r\n  }\r\n}\r\n\r\nclass FieldRenderComponent extends React.Component {\r\n\r\n  render() {\r\n    return <div style={{ color: '#fff' }}>\r\n      Hello from React!\r\n        </div>;\r\n  }\r\n}\r\n\r\nBlockly.fieldRegistry.register('base_field', BaseField);\r\n\r\nexport default BaseField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nconst ModalDialog = (props) => {\r\n    const { title, size, children, onCancel } = props;\r\n    const [show, setShow] = useState(true);\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        onCancel();\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} size={size} scrollable={true}>\r\n            <Modal.Header style={{ backgroundColor: \"var(--dark)\", color: \"var(--light)\" }} closeButton>{title}</Modal.Header>\r\n            <Modal.Body style={{ padding: `0rem` }}>\r\n                {children}\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\nModalDialog.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    size: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ModalDialog;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { labelize } from './../../utils';\r\n\r\nconst NumberField = ({ prop, index, data, isNameValue = false, onValueChange }) => {\r\n    if (prop.type !== \"number\") return null;\r\n\r\n    return (\r\n        <Form.Group>\r\n            <Form.Label>{labelize(prop.name)}</Form.Label>\r\n            <Form.Control id={prop.name}\r\n                type={prop.type}\r\n                min={prop.min}\r\n                max={prop.max}\r\n                step={prop.step}\r\n                defaultValue={isNameValue ? data.value : data[prop.name]}\r\n                onChange={e => {\r\n                    if (!isNameValue) data[prop.name] = e.target.value;\r\n                    onValueChange({ ...data }, e.target.value);\r\n                }}\r\n                size=\"sm\"\r\n                required={prop.required} />\r\n        </Form.Group>\r\n    )\r\n}\r\nNumberField.propTypes = {\r\n    prop: PropTypes.object.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    isNameValue: PropTypes.bool,\r\n    onValueChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default NumberField;\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { labelize } from './../../utils';\r\n\r\nconst isDisabled = (option, value) => {\r\n    return !!option.selector && !!option.selectorRef \r\n        ? !new RegExp(option.selector).test(value)\r\n        : false;\r\n}\r\n\r\nconst SelectField = ({ prop, index, data, isNameValue = false, isDatasetField = false, onValueChange }) => {\r\n    const [isValid, setIsValid] = useState(true);\r\n    if (prop.type !== \"select\" || (!!prop.hideIfSingleOption && prop.hideIfSingleOption && prop.options?.length === 1)) return null;\r\n    \r\n    // special condition to reset options\r\n    const invalidOptValue = 'Select a valid Option...';\r\n\r\n    return (\r\n        <Form.Group>\r\n            <Form.Label>{labelize(prop.name.toLowerCase())}</Form.Label>\r\n            <Form.Control id={prop.name} as=\"select\"\r\n                defaultValue={isNameValue ? (data.value !== 0 ? data.value : prop.options[data.value].name) : data[prop.name]}\r\n                onChange={e => {\r\n                    const value = e.target.value;\r\n                    if (value === invalidOptValue) { \r\n                        setIsValid(false);\r\n                        return;\r\n                    }\r\n                    setIsValid(true);\r\n                    if (!isNameValue) data[prop.name] = value;\r\n                    onValueChange({ ...data }, e.target.value);\r\n                }}\r\n                size=\"sm\"\r\n                style={isValid ? null : { color: `#ccc` }}\r\n                required={prop.required}>\r\n                {prop.options && prop.options.sort((a, b) => a.name > b.name).map((o, k) => (\r\n                    <option \r\n                        key={`opt${k}`} \r\n                        value={o[prop.optionName]}\r\n                        title={!!prop.optionTitle ? (`${o[prop.optionTitle]}: ${o.description}`) : ''}\r\n                        disabled={isDisabled(o, data[o.selectorRef])}\r\n                        >\r\n                        {o[prop.optionName]}\r\n                    </option>\r\n                )\r\n                )}\r\n            </Form.Control>\r\n        </Form.Group>\r\n    )\r\n}\r\nSelectField.propTypes = {\r\n    prop: PropTypes.object.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    isNameValue: PropTypes.bool,\r\n    isDatasetField: PropTypes.bool,\r\n    onValueChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default SelectField;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { labelize } from '../../utils';\r\n\r\nconst InputField = ({ prop, index, data, isNameValue = false, onValueChange }) => {\r\n    if (prop.type !== \"input\") return null;\r\n\r\n    return (\r\n        <Form.Group>\r\n            <Form.Label>{labelize(prop.name.toLowerCase())}</Form.Label>\r\n            <Form.Control id={prop.name}\r\n                type={prop.type}\r\n                min={prop.min}\r\n                max={prop.max}\r\n                step={prop.step}\r\n                defaultValue={isNameValue ? data.value : data[prop.name]}\r\n                onChange={e => {\r\n                    if (!isNameValue) data[prop.name] = e.target.value;\r\n                    onValueChange({ ...data }, e.target.value);\r\n                }}\r\n                size=\"sm\"\r\n                required={prop.required} />\r\n        </Form.Group>\r\n    )\r\n}\r\nInputField.propTypes = {\r\n    prop: PropTypes.object.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    isNameValue: PropTypes.bool,\r\n    onValueChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { labelize } from './../../utils';\r\n\r\nconst BooleanField = ({ prop, index, data, onValueChange }) => {\r\n    if (prop.type !== \"checkbox\") return null;\r\n\r\n    return (\r\n        <Form.Group>\r\n            <Form.Check id={prop.name}\r\n                label={labelize(prop.name)}\r\n                type={prop.type}\r\n                defaultValue={data[prop.name]}\r\n                checked={data[prop.name]}\r\n                onChange={e => {\r\n                    data[prop.name] = e.target.checked;\r\n                    onValueChange({ ...data }, e.target.checked);\r\n                }}\r\n                size=\"sm\"\r\n                required={prop.required} />\r\n        </Form.Group>\r\n\r\n    )\r\n}\r\nBooleanField.propTypes = {\r\n    prop: PropTypes.object.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onValueChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default BooleanField;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SourceReplacer = ({ source }) => {\r\n    const { description, replacements, annotations } = source;\r\n    \r\n    const maxWords = (value, max = 50) => {\r\n        return value.split(' ').length > max \r\n            ? value.split(' ', max).join(' ') + '...' \r\n            : value;\r\n    }\r\n\r\n    if ((!replacements.length || replacements.filter(r => !r.label.length || !r.url.length).length)\r\n        && (!annotations.length || annotations.filter(r => !r.label.length || !r.type.length).length)) {\r\n        return <span>{maxWords(description)}</span>;\r\n    }\r\n\r\n    const elements = [];\r\n    const replPositions = [];\r\n\r\n    const windowOpen = (e, url) => {\r\n        e.stopPropagation();\r\n        const win = window.open(url, '_blank');\r\n        win.focus();\r\n    }\r\n\r\n    replacements.filter(r => r.label.length && r.url.length).forEach((el, i) => {\r\n        const start = description.indexOf(el.label);\r\n        replPositions.push({\r\n            start: description.indexOf(el.label),\r\n            end: start + el.label.length,\r\n            url: el.url,\r\n            value: el.label,\r\n            type: \"link\",\r\n        });\r\n    });\r\n\r\n    annotations.filter(r => r.label.length && r.type.length).forEach((el, i) => {\r\n        const start = description.indexOf(el.label);\r\n        replPositions.push({\r\n            start: description.indexOf(el.label),\r\n            end: start + el.label.length,\r\n            value: el.label,\r\n            href: null,\r\n            type: el.type,\r\n        });\r\n    });\r\n\r\n    replPositions.sort((a, b) => a.start > b.start).forEach((pos, j, array) => {\r\n        if (j === 0 && pos.start > 0) {\r\n            elements.push({\r\n                start: 0,\r\n                type: 'text',\r\n                value: description.substring(0, pos.start),\r\n            });\r\n        }\r\n        elements.push({\r\n            type: pos.type,\r\n            href: pos.url,\r\n            value: pos.value,\r\n        });\r\n        if (j < replPositions.length - 1) {\r\n            elements.push({\r\n                start: 1,\r\n                type: 'text',\r\n                value: description.substring(pos.end, array[j + 1].start),\r\n            });\r\n        }\r\n        else if (j === replPositions.length - 1) {\r\n            elements.push({\r\n                start: -1,\r\n                type: 'text',\r\n                value: description.substring(pos.end),\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <p style={{ textAlign: \"justify\" }}>\r\n            {elements.map((e , i) => {\r\n                return (\r\n                    {\r\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid\r\n                        link: <a key={`a${i}`} href=\"#\" onClick={p => windowOpen(p, e.href)}>{e.value}</a>,\r\n                        text: <span key={`v${i}`}>{maxWords(e.value)}</span>,\r\n                        bold: <b key={`bv${i}`}>{e.value}</b>,\r\n                        strong: <s key={`bv${i}`}>{e.value}</s>,\r\n                        italic: <i key={`iv${i}`}>{e.value}</i>\r\n                    }[e.type]\r\n                )\r\n            })}\r\n        </p>\r\n    )\r\n}\r\nSourceReplacer.propTypes = {\r\n    source: PropTypes.object.isRequired\r\n}\r\n\r\nexport default SourceReplacer","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\n\r\nimport { srcImages } from '../utils';\r\n\r\nconst ImageCarousel = ({ prop }) => {\r\n    return (\r\n        <Carousel style={{ backgroundColor: `rgba(0,0,0,.03)` }}>\r\n            {prop.images.map((image, i) => {\r\n                const item = srcImages.files.find(srcImg => srcImg.indexOf(image.url) >= 0);\r\n                return <Carousel.Item key={`car${i}`}>\r\n                    <img src={item} alt={image.label} />\r\n                    <Carousel.Caption\r\n                        style={{\r\n                            position: `relative`,\r\n                            right: `0`,\r\n                            left: `0`,\r\n                            paddingTop: `0`,\r\n                        }}\r\n                    >\r\n                        <h6>\r\n                            <div style={{\r\n                                color: 'white',\r\n                                backgroundColor: '#6c757d',\r\n                                display: 'inline',\r\n                                paddingLeft: '12px',\r\n                                paddingRight: '12px',\r\n                                paddingBottom: '20px',\r\n                                opacity: '0.65',\r\n                            }}>\r\n                                {image.label}\r\n                            </div>\r\n                        </h6>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n            })}\r\n        </Carousel>\r\n    )\r\n}\r\nImageCarousel.propTypes = {\r\n    prop: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default ImageCarousel;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nimport SourceReplacer from '../components/source-replacer';\r\nimport ImageCarousel from './../components/image-carousel';\r\n\r\nimport { buildSource } from '../utils';\r\n\r\nconst HelpCard = ({ data }) => {\r\n    return (\r\n        <Card bg=\"dark\" text=\"light\">\r\n            <Card.Body>\r\n                <ul>\r\n                    {data?.properties\r\n                        .filter(p => \r\n                            !(p.type === \"select\" \r\n                            && (!!p.hideIfSingleOption && p.hideIfSingleOption && p.options?.length === 1))\r\n                        ).map((prop, index) => {\r\n                        if (!!prop.images && prop.images.length) {\r\n                            return (\r\n                                <div key={`help${prop.name}${index}`} style={{ marginBottom: `0` }}>\r\n                                    <ImageCarousel prop={prop} />\r\n                                </div>\r\n                            );\r\n                        }\r\n                        if (!!prop.itemProperties && prop.itemProperties.length) {\r\n                            return data.settings.map((sett, j) => {\r\n                                const arrProps = prop.itemProperties\r\n                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                if (!arrProps) return null;\r\n                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                return (\r\n                                    <li key={`help${sett.name}${j}`}>\r\n                                        <SourceReplacer source={buildSource(arrProp.description)} />\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                        if (!!prop.description) {\r\n                            return (\r\n                                <li key={`help${prop.name}${index}`}>\r\n                                    <SourceReplacer source={buildSource(prop.description)} />\r\n                                </li>\r\n                            );\r\n                        }\r\n                        else return null;\r\n                    })}\r\n                </ul>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\nHelpCard.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default HelpCard;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst ChainForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmChain\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nChainForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ChainForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport ChainForm from '../forms/chain-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <ChainForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass ChainField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new ChainField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n\r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = (blockTemplates\r\n                .find(bt => bt.blockName === \"custom_chain_field\")\r\n                .templates || [])\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Chain Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('chain_field', ChainField);\r\n\r\nexport default ChainField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst ChatMessageForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmChatMessage\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nChatMessageForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ChatMessageForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport ChatMessageForm from '../forms/chatmessage-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <ChatMessageForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass ChatMessageField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new ChatMessageField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_chat_message_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Chat Message Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('chat_message_field', ChatMessageField);\r\n\r\nexport default ChatMessageField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst ChatModelForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmChatModel\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nChatModelForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ChatModelForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport ChatModelForm from '../forms/chatmodel-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <ChatModelForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass ChatModelField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new ChatModelField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_chat_model_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Chat Model Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('chat_model_field', ChatModelField);\r\n\r\nexport default ChatModelField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst ChatPromptForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmChatPrompt\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nChatPromptForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ChatPromptForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport ChatPromptForm from '../forms/chatprompt-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <ChatPromptForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass ChatPromptField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new ChatPromptField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_chat_prompt_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Chat Prompt Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('chat_prompt_field', ChatPromptField);\r\n\r\nexport default ChatPromptField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst EmbeddingForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmEmbedding\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nEmbeddingForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default EmbeddingForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport EmbeddingForm from '../forms/embedding-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <EmbeddingForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass EmbeddingField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new EmbeddingField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_embedding_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Embedding Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('embedding_field', EmbeddingField);\r\n\r\nexport default EmbeddingField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst LlmForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmLlm\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nLlmForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default LlmForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport LlmForm from '../forms/llm-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <LlmForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass LlmField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new LlmField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_llm_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Llm Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('llm_field', LlmField);\r\n\r\nexport default LlmField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst LoaderForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmLoader\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nLoaderForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default LoaderForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport LoaderForm from '../forms/loader-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <LoaderForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass LoaderField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new LoaderField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_loader_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Loader Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('loader_field', LoaderField);\r\n\r\nexport default LoaderField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst MemoryForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmMemory\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nMemoryForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default MemoryForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport MemoryForm from '../forms/memory-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <MemoryForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass MemoryField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new MemoryField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_memory_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Memory Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('memory_field', MemoryField);\r\n\r\nexport default MemoryField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst RetrieverForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmRetriever\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nRetrieverForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default RetrieverForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport RetrieverForm from '../forms/retriever-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <RetrieverForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass RetrieverField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new RetrieverField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_retriever_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Retriever Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('retriever_field', RetrieverField);\r\n\r\nexport default RetrieverField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst SplitterForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmSplitter\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nSplitterForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default SplitterForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport SplitterForm from '../forms/splitter-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <SplitterForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass SplitterField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new SplitterField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_splitter_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Splitter Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('splitter_field', SplitterField);\r\n\r\nexport default SplitterField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst ToolForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmTool\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nToolForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ToolForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport ToolForm from '../forms/tool-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <ToolForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass ToolField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new ToolField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_tool_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Tool Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('tool_field', ToolField);\r\n\r\nexport default ToolField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst UtilForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmUtil\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nUtilForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default UtilForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport UtilForm from '../forms/util-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <UtilForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass UtilField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new UtilField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_util_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Util Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('util_field', UtilField);\r\n\r\nexport default UtilField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst VectorStoreForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmVectorStore\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nVectorStoreForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default VectorStoreForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport VectorStoreForm from '../forms/vectorstore-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <VectorStoreForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass VectorStoreField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new VectorStoreField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = blockTemplates\r\n                .find(bt => bt.blockName === \"custom_vectorstore_field\")\r\n                .templates\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"VectorStore Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('vectorstore_field', VectorStoreField);\r\n\r\nexport default VectorStoreField;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { labelize } from '../../utils';\r\n\r\nconst TextAreaField = ({ prop, index, data, isNameValue = false, onValueChange }) => {\r\n    if (prop.type !== 'textarea') return null;\r\n\r\n    return (\r\n        <Form.Group>\r\n            <Form.Label>{labelize(prop.name.toLowerCase())}</Form.Label>\r\n            <Form.Control as='textarea' id={prop.name}\r\n                type={prop.type}\r\n                min={prop.min}\r\n                max={prop.max}\r\n                step={prop.step}\r\n                rows={5}\r\n                defaultValue={isNameValue ? data.value : data[prop.name]}\r\n                onChange={e => {\r\n                    if (!isNameValue) data[prop.name] = e.target.value;\r\n                    onValueChange({ ...data }, e.target.value);\r\n                }}\r\n                size=\"sm\"\r\n                required={prop.required} />\r\n        </Form.Group>\r\n    )\r\n}\r\nTextAreaField.propTypes = {\r\n    prop: PropTypes.object.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    isNameValue: PropTypes.bool,\r\n    onValueChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TextAreaField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { faInfoCircle, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Icon from '../components/icon';\r\nimport NumberField from './fields/number-field';\r\nimport SelectField from './fields/select-field';\r\nimport InputField from './fields/input-field';\r\nimport TextAreaField from './fields/textarea-field';\r\nimport BooleanField from './fields/boolean-field';\r\nimport HelpCard from '../components/help-card';\r\n\r\nconst PromptForm = (props) => {\r\n    const { onSave, onCancel, onShowHelp } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [visibleHelp, setVisibleHelp] = useState(false);\r\n\r\n    const updateSettings = (changedData, value) => {\r\n        const props = changedData.properties\r\n            .find(dp => dp.name === \"settings\")\r\n            .itemProperties\r\n            .find(ip => ip.name === value);\r\n\r\n        if (!props) changedData.settings = [];\r\n        else changedData.settings = props.properties.map(p => ({ name: p.name, value: p.default }));\r\n        setData({ ...changedData });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        onSave({ ...data });\r\n    }\r\n\r\n    const handleSettings = (name, value) => {\r\n        const tmpSetts = [...data.settings];\r\n        tmpSetts.splice(tmpSetts.indexOf(data.settings.find(s => s.name === name)), 1, { name, value });\r\n        data.settings = [...tmpSetts];\r\n        setData({ ...data });\r\n    }\r\n\r\n    return (\r\n        <Card bg=\"light\" text=\"dark\" style={{ fontSize: `0.75rem`, border: `0 solid #ccc` }}>\r\n            <Card.Header style={{ padding: `0.25rem` }}>\r\n                <Button as=\"div\" size=\"sm\"\r\n                    onClick={e => {\r\n                        setVisibleHelp(!visibleHelp);\r\n                        onShowHelp(!visibleHelp);\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: `Transparent`,\r\n                        color: `#343a40`,\r\n                        border: `0 solid white`,\r\n                        width: `auto`,\r\n                        height: `auto`,\r\n                        marginLeft: `0.5rem`\r\n                    }}>\r\n                    <Icon icon={visibleHelp ? faChevronCircleLeft : faInfoCircle} size=\"1x\" />\r\n                    <small title=\"Click to expand or collapse\">Help</small>\r\n                </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Form id=\"frmPrompt\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Form.Row className=\"mb-2\">\r\n                        <Col>\r\n                            {data.properties.map((prop, index) => {\r\n                                return (\r\n                                    {\r\n                                        select: (\r\n                                            <SelectField key={`prop${prop.name}${index}`}\r\n                                                prop={prop}\r\n                                                index={index}\r\n                                                data={data}\r\n                                                onValueChange={(changedData, updatedValue) => {\r\n                                                    if (!!prop.refProperty) updateSettings(changedData, updatedValue);\r\n                                                }}\r\n                                            />\r\n                                        ),\r\n\r\n                                        array: (() => {\r\n                                            if (prop.type !== 'array') return null;\r\n\r\n                                            return data.settings.map((sett, j) => {\r\n                                                const arrProps = prop.itemProperties\r\n                                                    .find(ip => ip.name === data[prop.refProperty]);\r\n\r\n                                                if (!arrProps) return null;\r\n                                                const arrProp = arrProps.properties.find(ap => ap.name === sett.name);\r\n                                                console.log('ARRPROP: ', arrProp)\r\n\r\n                                                return (\r\n                                                    {\r\n                                                        number: (\r\n                                                            <NumberField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        input: (\r\n                                                            <InputField key={`prop${sett.name}${j}`}\r\n                                                                prop={{...arrProp, type: 'textarea'}}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n                                                        \r\n                                                        textarea: (\r\n                                                            <TextAreaField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                isNameValue={true}\r\n                                                                onValueChange={(changedData, updatedValue) => handleSettings(sett.name, updatedValue)}\r\n                                                            />\r\n                                                        ),\r\n\r\n                                                        checkbox: (\r\n                                                            <BooleanField key={`prop${sett.name}${j}`}\r\n                                                                prop={arrProp}\r\n                                                                index={j}\r\n                                                                data={sett}\r\n                                                                onValueChange={(changedData, isChecked) => handleSettings(sett.name, isChecked)}\r\n                                                            />\r\n                                                        )\r\n\r\n                                                    }[arrProp.type]\r\n                                                )\r\n                                            })\r\n                                        })()\r\n\r\n                                    }[prop.type]\r\n                                )\r\n                            })}\r\n                        </Col>\r\n                        {visibleHelp && <Col lg={8}>\r\n                            <HelpCard data={data} />\r\n                        </Col>}\r\n                    </Form.Row>\r\n                    <Button id=\"save\" type=\"submit\" variant=\"outline-primary\" size=\"sm\" style={{ float: `right` }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button id=\"cancel\" variant=\"outline-secondary\" size=\"sm\"\r\n                        onClick={onCancel}\r\n                        style={{ float: `right`, marginRight: `8px` }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card >\r\n    )\r\n}\r\nPromptForm.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onShowHelp: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default PromptForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nimport ModalDialog from '../components/modal';\r\nimport PromptForm from '../forms/prompt-form';\r\n\r\nimport {\r\n    hydrate,\r\n    dehydrate,\r\n    groupTemplatesByParent,\r\n    platformTemplates,\r\n} from '../utils';\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\nconst ModalForm = ({ title, data, onCancel, onSave }) => {\r\n    const [size, setSize] = useState(\"\");\r\n\r\n    const onShowHelp = (visible) => setSize(visible ? \"lg\" : \"\");\r\n\r\n    return <ModalDialog title={title} size={size} onCancel={onCancel}>\r\n        <PromptForm data={data} onSave={onSave} onCancel={onCancel} onShowHelp={onShowHelp} />\r\n    </ModalDialog>\r\n}\r\nModalForm.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n    onSave: PropTypes.func.isRequired,\r\n}\r\n\r\nclass PromptField extends BaseField {\r\n\r\n    static fromJson(options) {\r\n        return new PromptField(dehydrate(options['data']));\r\n    }\r\n\r\n    SERIALIZABLE = true;\r\n\r\n    onSave = (values) => {\r\n        if (Object.keys(values).length) {\r\n            this.setValue(values);\r\n        }\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    onCancel = () => {\r\n        Blockly.DropDownDiv.hideIfOwner(this, true);\r\n    }\r\n\r\n    getText_() {\r\n        const keys = Object.keys(this.value_);\r\n        return this.value_[keys[0]];\r\n    };\r\n\r\n    fromXml(fieldElement) {\r\n        const value = dehydrate(fieldElement.textContent);\r\n        \r\n        // re-assign available block templates as options for the select in case they are updated\r\n        value.properties\r\n            .find(p => p.name === \"template\")\r\n            .options = (blockTemplates\r\n                .find(bt => bt.blockName === \"custom_prompt_field\")\r\n                ?.templates || [])\r\n                .filter(t => t.platform === this.getPlatform());\r\n        \r\n        this.setValue(value);\r\n    }\r\n\r\n    toXml(fieldElement) {\r\n        fieldElement.textContent = hydrate(this.value_);\r\n        return fieldElement;\r\n    }\r\n\r\n    render() {\r\n        return <ModalForm\r\n            title=\"Prompt Settings\"\r\n            data={this.value_}\r\n            onCancel={this.onCancel}\r\n            onSave={this.onSave}\r\n        />\r\n    }\r\n}\r\n\r\nBlockly.fieldRegistry.register('prompt_field', PromptField);\r\n\r\nexport default PromptField;\r\n","import * as Blockly from 'blockly/core';\r\n\r\n// Since we're using json to initialize the field, we'll need to import it.\r\nimport '../fields/BaseField';\r\n\r\nimport '../fields/ChainField';\r\nimport '../fields/ChatMessageField';\r\nimport '../fields/ChatModelField';\r\nimport '../fields/ChatPromptField';\r\nimport '../fields/EmbeddingField';\r\nimport '../fields/LlmField';\r\nimport '../fields/LoaderField';\r\nimport '../fields/MemoryField';\r\nimport '../fields/RetrieverField';\r\nimport '../fields/SplitterField';\r\nimport '../fields/ToolField';\r\nimport '../fields/UtilField';\r\nimport '../fields/VectorStoreField';\r\nimport '../fields/PromptField';\r\n\r\nimport { hydrate, platformTemplates, groupTemplatesByParent } from '../utils';\r\n\r\nconst customChatPromptFieldDef = require('./json-definitions/custom_chat_prompt_field.json');\r\nconst customLlmFieldDef = require('./json-definitions/custom_llm_field.json');\r\nconst customChainFieldDef = require('./json-definitions/custom_chain_field.json');\r\nconst customToolFieldDef = require('./json-definitions/custom_tool_field.json');\r\nconst customUtilFieldDef = require('./json-definitions/custom_util_field.json');\r\nconst customChatModelFieldDef = require('./json-definitions/custom_chat_model_field.json');\r\nconst customChatMessageFieldDef = require('./json-definitions/custom_chat_message_field.json');\r\nconst customLoaderFieldDef = require('./json-definitions/custom_loader_field.json');\r\nconst customVectorstoreFieldDef = require('./json-definitions/custom_vectorstore_field.json');\r\nconst customSplitterFieldDef = require('./json-definitions/custom_splitter_field.json');\r\nconst customEmbeddingFieldDef = require('./json-definitions/custom_embedding_field.json');\r\nconst customMemoryFieldDef = require('./json-definitions/custom_memory_field.json');\r\nconst customRetrieverFieldDef = require('./json-definitions/custom_retriever_field.json');\r\nconst customPromptFieldDef = require('./json-definitions/custom_prompt_field.json');\r\n\r\nconst blockTemplates = groupTemplatesByParent(platformTemplates());\r\n\r\n// assign the block templates \r\n[\r\n  { name: 'custom_chat_prompt_field', def: customChatPromptFieldDef },\r\n  { name: 'custom_llm_field', def: customLlmFieldDef },\r\n  { name: 'custom_chain_field', def: customChainFieldDef },\r\n  { name: 'custom_tool_field', def: customToolFieldDef },\r\n  { name: 'custom_util_field', def: customUtilFieldDef },\r\n  { name: 'custom_chat_model_field', def: customChatModelFieldDef },\r\n  { name: 'custom_chat_message_field', def: customChatMessageFieldDef },\r\n  { name: 'custom_loader_field', def: customLoaderFieldDef },\r\n  { name: 'custom_vectorstore_field', def: customVectorstoreFieldDef },\r\n  { name: 'custom_splitter_field', def: customSplitterFieldDef },\r\n  { name: 'custom_embedding_field', def: customEmbeddingFieldDef },\r\n  { name: 'custom_memory_field', def: customMemoryFieldDef },\r\n  { name: 'custom_retriever_field', def: customRetrieverFieldDef },\r\n  { name: 'custom_prompt_field', def: customPromptFieldDef },\r\n].forEach(t => {\r\n  t.def.properties\r\n    .find(p => p.name === \"template\")\r\n    .options = blockTemplates.find(bt => bt.blockName === t.name)?.templates;\r\n});\r\n\r\nconst customBaseField = {\r\n  \"type\": \"custom_base_field\",\r\n  \"message0\": \"custom field %1\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"base_field\",\r\n      \"name\": \"FIELD\",\r\n      \"text\": \"Click me\"\r\n    },\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n};\r\n\r\nBlockly.Blocks['custom_base_field'] = {\r\n  init: function () {\r\n    this.jsonInit(customBaseField);\r\n    this.setStyle('loop_blocks');\r\n  }\r\n};\r\n\r\nconst customChatPromptField = {\r\n  \"type\": \"custom_chat_prompt_field\",\r\n  \"message0\": \"chat_prompt type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"chat_prompt_field\",\r\n      \"name\": \"CHAT_PROMPT\",\r\n      \"data\": hydrate(customChatPromptFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select chat_prompt settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_chat_prompt_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customChatPromptField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(220);\r\n  }\r\n};\r\n\r\nconst customLlmField = {\r\n  \"type\": \"custom_llm_field\",\r\n  \"message0\": \"llm type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"llm_field\",\r\n      \"name\": \"LLM\",\r\n      \"data\": hydrate(customLlmFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select llm settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_llm_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customLlmField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(30);\r\n  }\r\n};\r\n\r\nconst customChainField = {\r\n  \"type\": \"custom_chain_field\",\r\n  \"message0\": \"chain type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"chain_field\",\r\n      \"name\": \"CHAIN\",\r\n      \"data\": hydrate(customChainFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select chain settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_chain_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customChainField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(175);\r\n  }\r\n};\r\n\r\nconst customToolField = {\r\n  \"type\": \"custom_tool_field\",\r\n  \"message0\": \"tool type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"tool_field\",\r\n      \"name\": \"TOOL\",\r\n      \"data\": hydrate(customToolFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select tool settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_tool_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customToolField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(270);\r\n  }\r\n};\r\n\r\nconst customUtilField = {\r\n  \"type\": \"custom_util_field\",\r\n  \"message0\": \"util type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"util_field\",\r\n      \"name\": \"UTIL\",\r\n      \"data\": hydrate(customUtilFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select util settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_util_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customUtilField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(280);\r\n  }\r\n};\r\n\r\nconst customChatModelField = {\r\n  \"type\": \"custom_chat_model_field\",\r\n  \"message0\": \"chat_model type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"chat_model_field\",\r\n      \"name\": \"CHAT_MODEL\",\r\n      \"data\": hydrate(customChatModelFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select chat_model settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_chat_model_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customChatModelField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(230);\r\n  }\r\n};\r\n\r\nconst customChatMessageField = {\r\n  \"type\": \"custom_chat_message_field\",\r\n  \"message0\": \"chat_message type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"chat_message_field\",\r\n      \"name\": \"CHAT_MESSAGE\",\r\n      \"data\": hydrate(customChatMessageFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select chat_message settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_chat_message_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customChatMessageField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(240);\r\n  }\r\n};\r\n\r\nconst customLoaderField = {\r\n  \"type\": \"custom_loader_field\",\r\n  \"message0\": \"loader type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"loader_field\",\r\n      \"name\": \"LOADER\",\r\n      \"data\": hydrate(customLoaderFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select loader settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_loader_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customLoaderField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(60);\r\n  }\r\n};\r\n\r\nconst customVectorstoreField = {\r\n  \"type\": \"custom_vectorstore_field\",\r\n  \"message0\": \"vectorstore type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"vectorstore_field\",\r\n      \"name\": \"VECTORSTORE\",\r\n      \"data\": hydrate(customVectorstoreFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select vectorstore settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_vectorstore_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customVectorstoreField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(80);\r\n  }\r\n};\r\n\r\nconst customSplitterField = {\r\n  \"type\": \"custom_splitter_field\",\r\n  \"message0\": \"splitter type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"splitter_field\",\r\n      \"name\": \"SPLITTER\",\r\n      \"data\": hydrate(customSplitterFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select splitter settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_splitter_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customSplitterField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(100);\r\n  }\r\n};\r\n\r\nconst customEmbeddingField = {\r\n  \"type\": \"custom_embedding_field\",\r\n  \"message0\": \"embedding type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"embedding_field\",\r\n      \"name\": \"EMBEDDING\",\r\n      \"data\": hydrate(customEmbeddingFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select embedding settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_embedding_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customEmbeddingField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(120);\r\n  }\r\n};\r\n\r\nconst customMemoryField = {\r\n  \"type\": \"custom_memory_field\",\r\n  \"message0\": \"memory type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"memory_field\",\r\n      \"name\": \"MEMORY\",\r\n      \"data\": hydrate(customMemoryFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select memory settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_memory_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customMemoryField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(140);\r\n  }\r\n};\r\n\r\nconst customRetrieverField = {\r\n  \"type\": \"custom_retriever_field\",\r\n  \"message0\": \"retriever type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"retriever_field\",\r\n      \"name\": \"RETRIEVER\",\r\n      \"data\": hydrate(customRetrieverFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select retriever settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_retriever_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customRetrieverField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(160);\r\n  }\r\n};\r\n\r\nconst customPromptField = {\r\n  \"type\": \"custom_prompt_field\",\r\n  \"message0\": \"prompt type %1 + settings\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"prompt_field\",\r\n      \"name\": \"PROMPT\",\r\n      \"data\": hydrate(customPromptFieldDef)\r\n    }\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"tooltip\": \"select prompt settings\",\r\n  \"helpUrl\": \"\",\r\n};\r\n\r\nBlockly.Blocks[\"custom_prompt_field\"] = {\r\n  init: function () {\r\n    this.jsonInit(customPromptField);\r\n    this.setStyle(\"procedure_blocks\");\r\n    this.setColour(954);\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * \r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Define generation methods for custom blocks.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\n// More on generating code:\r\n// https://developers.google.com/blockly/guides/create-custom-blocks/generating-code\r\n\r\nimport * as Blockly from 'blockly/core';\r\nimport 'blockly/javascript';\r\n\r\nBlockly.JavaScript['custom_base_field'] = function (block) {\r\n    return 'console.log(\\'custom block\\');\\n';\r\n};\r\n","import * as Blockly from 'blockly/core';\r\nimport moment from 'moment';\r\n\r\nimport { srcAppTemplates, srcTemplates } from '../utils';\r\n\r\nconst platforms = [];\r\nnew Set(srcTemplates.names.map(n => n.split('/')[1]))\r\n  .forEach(n => platforms.push(n));\r\n\r\nBlockly.Blocks['application'] = {\r\n  init: function () {\r\n    this.appendDummyInput()\r\n      .appendField(\"application\")\r\n      .appendField(new Blockly.FieldTextInput(`Application-` + moment().format('MM-DD-YY:HH:mm:ss')), \"APPLICATION_NAME\")\r\n      .appendField(\"platform\")\r\n      .appendField(new Blockly.FieldDropdown(\r\n        platforms.filter(p => p === 'langchain').map(p => [p, p.toUpperCase()])\r\n      ), \"PLATFORM\")\r\n      .appendField(\"template\")\r\n      .appendField(new Blockly.FieldDropdown(\r\n        srcAppTemplates.map(t => {\r\n          const nameParts = t.split('/');\r\n          const tplName = nameParts[nameParts.length - 1].split('.')[0];\r\n\r\n          return [tplName, tplName.toUpperCase()];\r\n        })\r\n      ), \"TEMPLATE\");\r\n    this.appendStatementInput(\"APPLICATION_STATEMENTS\")\r\n      .setCheck(null);\r\n    this.setColour(230);\r\n    this.setTooltip(\"application configuration\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['chains'] = {\r\n  init: function () {\r\n    this.appendDummyInput()\r\n      .appendField(\"chain\");\r\n    this.appendStatementInput(\"CHAIN_STATEMENTS\")\r\n      .setCheck(\"chain\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(145);\r\n    this.setTooltip(\"chains configuration\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['tools'] = {\r\n  init: function () {\r\n    this.appendDummyInput()\r\n      .appendField(\"agent\");\r\n    this.appendStatementInput(\"TOOL_STATEMENTS\")\r\n      .setCheck(\"tool\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(260);\r\n    this.setTooltip(\"agent configuration\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['prompts'] = {\r\n  init: function () {\r\n    this.appendDummyInput()\r\n      .appendField(\"prompts\");\r\n    this.appendStatementInput(\"PROMPT_STATEMENTS\")\r\n      .setCheck(\"prompt\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(940);\r\n    this.setTooltip(\"prompts configuration\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n","import * as Blockly from 'blockly/core';\r\nimport 'blockly/javascript';\r\nimport { evalSource } from '../utils';\r\n\r\nBlockly.JavaScript['application'] = function (block) {\r\n  return evalSource(\r\n    block,\r\n    /*root*/ null,\r\n    /*props*/[\r\n      {\r\n        propertyName: 'name',\r\n        fieldName: 'APPLICATION_NAME',\r\n        isVariable: false,\r\n        transform: null,\r\n        assignment: null\r\n      },\r\n      {\r\n        propertyName: 'platform',\r\n        fieldName: 'PLATFORM',\r\n        isVariable: false,\r\n        transform: null,\r\n        assignment: null\r\n      }\r\n    ],\r\n    /*statements*/[\r\n      {\r\n        isArray: false,\r\n        fieldName: 'APPLICATION_STATEMENTS',\r\n      }\r\n    ],\r\n    /*isArray*/ false,\r\n    /*appendSufix*/ false\r\n  );\r\n};\r\n\r\nBlockly.JavaScript['chains'] = function (block) {\r\n  return evalSource(\r\n    block,\r\n    /*root*/ 'chains',\r\n    /*props*/ null,\r\n    /*statements*/[\r\n      {\r\n        isArray: true,\r\n        fieldName: 'CHAIN_STATEMENTS',\r\n      }\r\n    ],\r\n    /*isArray*/ true\r\n  );\r\n};\r\n\r\nBlockly.JavaScript['custom_chat_prompt_field'] = function (block) {\r\n  return evalSource(block, 'chat_prompt', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'CHAT_PROMPT',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_llm_field'] = function (block) {\r\n  return evalSource(block, 'llm', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'LLM',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_llm_field'] = function (block) {\r\n  return evalSource(block, 'llm', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'LLM',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_chain_field'] = function (block) {\r\n  return evalSource(block, 'chain', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'CHAIN',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_tool_field'] = function (block) {\r\n  return evalSource(block, 'tool', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'TOOL',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_util_field'] = function (block) {\r\n  return evalSource(block, 'util', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'UTIL',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_chat_model_field'] = function (block) {\r\n  return evalSource(block, 'chat_model', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'CHAT_MODEL',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_chat_message_field'] = function (block) {\r\n  return evalSource(block, 'chat_message', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'CHAT_MESSAGE',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_loader_field'] = function (block) {\r\n  return evalSource(block, 'loader', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'LOADER',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_vectorstore_field'] = function (block) {\r\n  return evalSource(block, 'vectorstore', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'VECTORSTORE',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_splitter_field'] = function (block) {\r\n  return evalSource(block, 'splitter', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'SPLITTER',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_embedding_field'] = function (block) {\r\n  return evalSource(block, 'embedding', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'EMBEDDING',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_memory_field'] = function (block) {\r\n  return evalSource(block, 'memory', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'MEMORY',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['custom_retriever_field'] = function (block) {\r\n  return evalSource(block, 'retriever', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'RETRIEVER',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['prompts'] = function (block) {\r\n  return evalSource(\r\n    block,\r\n    /*root*/ 'prompts',\r\n    /*props*/ null,\r\n    /*statements*/[\r\n      {\r\n        isArray: true,\r\n        fieldName: 'PROMPT_STATEMENTS',\r\n      }\r\n    ],\r\n    /*isArray*/ true\r\n  );\r\n};\r\n\r\nBlockly.JavaScript['custom_prompt_field'] = function (block) {\r\n  return evalSource(block, 'prompt', [\r\n    {\r\n      propertyName: 'type',\r\n      fieldName: 'PROMPT',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.JavaScript['tools'] = function (block) {\r\n  return evalSource(\r\n    block,\r\n    /*root*/ 'tools',\r\n    /*props*/ null,\r\n    /*statements*/[\r\n      {\r\n        isArray: true,\r\n        fieldName: 'TOOL_STATEMENTS',\r\n      }\r\n    ],\r\n    /*isArray*/ true\r\n  );\r\n};\r\n","import * as Handlebars from 'handlebars';\r\n\r\nHandlebars.registerHelper({\r\n  eq: (v1, v2) => v1 === v2,\r\n  ne: (v1, v2) => v1 !== v2,\r\n  lt: (v1, v2) => v1 < v2,\r\n  gt: (v1, v2) => v1 > v2,\r\n  lte: (v1, v2) => v1 <= v2,\r\n  gte: (v1, v2) => v1 >= v2,\r\n  and() {\r\n    return Array.prototype.every.call(arguments, Boolean);\r\n  },\r\n  or() {\r\n    return Array.prototype.slice.call(arguments, 0, -1).some(Boolean);\r\n  }\r\n});\r\n\r\n// { settings: [{ name: 'x', value: 1.0 }]}\r\nHandlebars.registerHelper(\"arrayprop\", (array, index, name, defaultValue = '') =>\r\n  Array.isArray(array) && index < array.length\r\n    ? array[index][name]\r\n    : defaultValue);\r\n\r\nHandlebars.registerHelper(\"findarrayprop\", (array, name, defaultValue) => {\r\n  if (!Array.isArray(array)) return defaultValue;\r\n\r\n  const item = array.find(a => a.name.toLowerCase() === name.toLowerCase())\r\n  return item\r\n    ? item.value\r\n    : defaultValue;\r\n})\r\n\r\n//split=['train[:80%]', 'train[80%:90%]', 'train[90%:]']\r\nHandlebars.registerHelper(\"trainsplit\", (value) => `train[:${value}%]`);\r\nHandlebars.registerHelper(\"testsplit\", (v1, v2) => `train[${v1}%:${(parseInt(v1, 10) + parseInt(v2, 10))}%]`);\r\nHandlebars.registerHelper(\"valsplit\", (v1, v2) => `train[${((parseInt(v1, 10) + parseInt(v2, 10)))}%:]`);\r\n\r\n//EarlyStopping\r\nHandlebars.registerHelper(\"varialize\", (value) =>\r\n  `${value[0].toLowerCase()}${value.substring(1).replace(/[A-Z]/g, (m, $1) => `_${m.toLowerCase()}`)}`);\r\n\r\nHandlebars.registerHelper(\"quote\", (value) => {\r\n  if (typeof value === 'string') return `'${value}'`;\r\n  if (typeof value === 'boolean') {\r\n    const boolVal = `${value}`;\r\n    return `${boolVal[0].toUpperCase()}${boolVal.substring(1)}`;\r\n  }\r\n  return value\r\n});\r\n","import * as Blockly from 'blockly/core';\r\nimport 'blockly/python';\r\n\r\nimport { evalSource, platformTemplates } from '../utils';\r\nimport './handlebars-helpers';\r\n\r\nconst platforms = [];\r\nwindow['output'] = [];\r\nwindow['platform'] = null;\r\nwindow['appProps'] = null;\r\n\r\nplatformTemplates(platforms, true);\r\n\r\nconst getPlatformTemplate = (name) => {\r\n  return platforms\r\n    .find(p => p.name.toLowerCase() === window['platform'].toLowerCase())\r\n    .templates\r\n    .find(t => t.name.toLowerCase() === name.toLowerCase());\r\n}\r\n\r\nBlockly.Python['application'] = function (block) {\r\n  window['platform'] = block.getFieldValue('PLATFORM');\r\n  block.template = getPlatformTemplate(block.getFieldValue('TEMPLATE'));\r\n  block.raiseOnDone = true;\r\n\r\n  // find and set the app properties\r\n  window['appProps'] = null;\r\n\r\n  const db = block.workspace.blockDB_;\r\n  const key = Object.keys(db).find(k => db[k].type === 'dataset_training');\r\n  if (key && window['platform'].toLowerCase() === 'pieml') {\r\n    const item = db[key].inputList[0]\r\n    const type = item.fieldRow.find(fr => fr.name === 'TRAIN').value_.toLowerCase();\r\n    const flavor = item.fieldRow.find(fr => fr.name === 'FLAVOR').value_.toLowerCase();\r\n    window['appProps'] = { type, flavor }\r\n  }\r\n\r\n  // reset python output\r\n  window['output'].splice(0, window['output'].length);\r\n\r\n  const obj = evalSource(\r\n    block,\r\n    /*root*/ null,\r\n    /*props*/[\r\n      {\r\n        propertyName: 'name',\r\n        fieldName: 'APPLICATION_NAME',\r\n        isVariable: false,\r\n        transform: null,\r\n        assignment: null,\r\n      },\r\n      {\r\n        propertyName: 'platform',\r\n        fieldName: 'PLATFORM',\r\n        isVariable: false,\r\n        transform: (value) => value.toLowerCase(),\r\n        assignment: null,\r\n      },\r\n      {\r\n        propertyName: 'template',\r\n        fieldName: 'TEMPLATE',\r\n        isVariable: false,\r\n        transform: (value) => value.toLowerCase(),\r\n        assignment: null,\r\n      }\r\n    ],\r\n    /*statements*/[\r\n      {\r\n        isArray: false,\r\n        fieldName: 'APPLICATION_STATEMENTS',\r\n      }\r\n    ],\r\n    /*isArray*/ false,\r\n    /*appendSufix*/ false\r\n  );\r\n\r\n  return JSON.stringify(obj);\r\n};\r\n\r\nBlockly.Python['chains'] = function (block) {\r\n  block.template = getPlatformTemplate(block.type);\r\n  return evalSource(\r\n    block,\r\n    /*root*/ 'chains',\r\n    /*props*/ null,\r\n    /*statements*/[\r\n      {\r\n        isArray: true,\r\n        fieldName: 'CHAIN_STATEMENTS',\r\n      }\r\n    ],\r\n    /*isArray*/ true\r\n  );\r\n};\r\n\r\nBlockly.Python['custom_chain_field'] = function (block) {\r\n  block.template = getPlatformTemplate(block.getFieldValue('CHAIN').template);\r\n  return evalSource(block, 'chain', [\r\n    {\r\n      propertyName: 'options',\r\n      fieldName: 'CHAIN',\r\n      isVariable: false,\r\n      transform: null,\r\n      assignment: null,\r\n    }\r\n  ]);\r\n};\r\n\r\nBlockly.Python['tools'] = function (block) {\r\n  block.template = getPlatformTemplate(block.type);\r\n  return evalSource(\r\n    block,\r\n    /*root*/ 'tools',\r\n    /*props*/ null,\r\n    /*statements*/[\r\n      {\r\n        isArray: true,\r\n        fieldName: 'TOOL_STATEMENTS',\r\n      }\r\n    ],\r\n    /*isArray*/ true\r\n  );\r\n};\r\n","export enum eRunMode {\r\n    Local = 1,\r\n    Remote = 2\r\n}\r\n\r\nexport type IStoreContext = {\r\n    getApplications(): IApplication[],\r\n    setApplications(apps: IApplication[]): void,\r\n    getSelectedApplicationId(): string,\r\n    setSelectedApplicationId(id: string): void,\r\n    getTopMenu(): ITopMenu[],\r\n    getLeftMenu(): ILeftMenu[],\r\n    setLeftMenu(menu: ILeftMenu[]): void,\r\n}\r\n\r\nexport type IApiContext = {\r\n    buildLangChain(elements: any): Promise<string>,\r\n}\r\n\r\nexport type IDataContext = {\r\n    store: IStoreContext,\r\n    api: IApiContext,\r\n    whoAmI: string,\r\n}\r\n\r\nexport type IApplication = {\r\n    name: string\r\n    id: string\r\n    content: string\r\n    json: any\r\n}\r\n\r\nexport type IOption = {\r\n    name: string\r\n    label: string\r\n    link: string\r\n    icon: any\r\n    app: IApplication\r\n}\r\n\r\nexport type ITopMenu = {\r\n    label: string\r\n    link: string\r\n    icon: any\r\n    options: IOption[] | undefined\r\n}\r\n\r\nexport type ILeftMenu = {\r\n    label: string\r\n    link: string\r\n    icon: any\r\n    items: IApplication[] | undefined\r\n}\r\n\r\nexport type IBlockProperty = {\r\n    propertyName: string\r\n    fieldName: string\r\n    isVariable: boolean | undefined\r\n    transform: any | undefined\r\n    assignment: any | undefined\r\n}\r\n\r\nexport type IStatement = {\r\n    fieldName: string\r\n    isArray: boolean\r\n}\r\n\r\nexport type IOutput = {\r\n    type: string\r\n    order: number\r\n    content: string\r\n    source: any\r\n}\r\n\r\nexport type IAppProp = {\r\n    name: string\r\n    value: any\r\n}\r\n\r\nexport type ICustomWindow = {\r\n    window: Window\r\n    output: IOutput[]\r\n    appProps: IAppProp[]\r\n}\r\n","import React from 'react';\r\n\r\nimport { IDataContext } from './types';\r\n\r\nconst DataContext = React.createContext<IDataContext>({\r\n    whoAmI: 'unknown context',\r\n    store: {\r\n        getApplications: () => [],\r\n        setApplications: (apps) => { },\r\n        getSelectedApplicationId: () => '',\r\n        setSelectedApplicationId: (id) => { },\r\n        getTopMenu: () => [],\r\n        getLeftMenu: () => [],\r\n        setLeftMenu: (menu) => { },\r\n    },\r\n    api: {\r\n        buildLangChain: async (elements: any) => null,\r\n    }\r\n});\r\n\r\nexport default DataContext;","/// <reference path=\"../node_modules/blockly/blockly.d.ts\"/>\r\n/// <reference path=\"../node_modules/blockly/python.js\"/>\r\n/// <reference path=\"../node_modules/blockly/core.js\"/>\r\n\r\nimport React, { useContext, useState } from 'react';\r\n\r\nimport BlocklyPython from 'blockly/python';\r\nimport Blockly from 'blockly';\r\nimport * as BlocklyCore from 'blockly/core'\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Layout from './components/layout';\r\nimport ToastMessage from './components/toast-message';\r\nimport BlocklyComponent, { Block } from './Blockly';\r\n\r\nimport './blocks/customblocks';\r\nimport './generator/generator';\r\nimport './blocks/ml-blocks';\r\nimport './generator/ml-blocks-generator';\r\nimport './generator/ml-blocks-generator-python';\r\n\r\nimport DataContext from './context';\r\n\r\nimport {\r\n  newApp,\r\n  xmlFields,\r\n} from './utils';\r\n\r\nimport { IApplication, IOption, ILeftMenu } from './types';\r\n\r\nconst App = () => {\r\n  const ctx = useContext(DataContext);\r\n  const store = ctx.store;\r\n  const buildToastAction = (title: string, message: string, isVisible = false) => ({ title, message, isVisible });\r\n  const defaultToastAction = buildToastAction('', '');\r\n  const [applications, setApplications] = useState(store.getApplications());\r\n  const [selectedApplicationId, setSelectedApplicationId] = useState(store.getSelectedApplicationId());\r\n  const [application, setApplication] = useState(applications.find((app: IApplication) => app.id === selectedApplicationId) || newApp());\r\n  const [initialXml, setInitialXml] = useState(application?.content);\r\n  const [topMenu,] = useState(store.getTopMenu());\r\n  const [leftMenu, setLeftMenu] = useState(store.getLeftMenu());\r\n  const [isBusy, setIsBusy] = useState(true);\r\n  const [toastAction, setToastAction] = useState(defaultToastAction);\r\n\r\n  let simpleWorkspace: BlocklyComponent;\r\n  const isRemote = ctx.whoAmI === \"remote context\";\r\n\r\n  const onItemSelected = (option: IOption, index: number) => {\r\n    switch (option.link) {\r\n      case \"#new\":\r\n        addApplication(newApp());\r\n        break;\r\n      case \"#save\":\r\n        saveApplication();\r\n        break;\r\n      case \"#download\":\r\n        downloadApplications();\r\n        break;\r\n      case \"#add-sample\":\r\n        addApplication(option.app || newApp());\r\n        break;\r\n      default: /*Selected Application item*/\r\n        loadApplication(index);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onItemRemoved = (option: IOption, index: number) => {\r\n    setIsBusy(true);\r\n\r\n    const app = newApp();\r\n    const tmpApps = [...applications];\r\n    const isSingleApp = applications.length === 1;\r\n    if (isSingleApp)\r\n      tmpApps.splice(tmpApps.indexOf(application), 1, app);\r\n    else\r\n      tmpApps.splice(tmpApps.indexOf(application), 1);\r\n    const apps = [\r\n      ...tmpApps,\r\n    ];\r\n    const selApp = isSingleApp ? app : apps[0];\r\n    setSelectedApplicationId(selApp.id);\r\n    setApplication(selApp);\r\n    setApplications(apps);\r\n    const menu = [...leftMenu];\r\n    menu[0].items = [...apps];\r\n    setLeftMenu(menu);\r\n    setToastAction(buildToastAction('Application removed', `${option.name} has been successfuly removed`, true));\r\n    saveState(apps, selApp.id, menu);\r\n    setTimeout(() => {\r\n      document.location.reload();\r\n    }, 500);\r\n  }\r\n\r\n  const onItemClonned = (option: IOption, index: number) => {\r\n    const tmpApp = newApp();\r\n    const app = {\r\n      ...application,\r\n      id: tmpApp.id,\r\n      name: `${application.name}-${tmpApp.name.replace('Application-', '')}`\r\n    };\r\n    addApplication(app)\r\n  }\r\n\r\n  const saveState = (apps: IApplication[], selAppId: string, menu: ILeftMenu[], clearBusy: boolean = true) => {\r\n    store.setApplications(apps);\r\n    store.setSelectedApplicationId(selAppId);\r\n    store.setLeftMenu(menu);\r\n    if (clearBusy) setIsBusy(false);\r\n  }\r\n\r\n  const loadApplication = (index: number) => {\r\n    const app = applications[index];\r\n    if (selectedApplicationId !== app.id) {\r\n      setIsBusy(true);\r\n      setSelectedApplicationId(app.id);\r\n      setApplication(app)\r\n      setInitialXml(app.content);\r\n      saveState(applications, app.id, leftMenu);\r\n      document.location.reload();\r\n    }\r\n  }\r\n\r\n  const addApplication = (existingApp: IApplication) => {\r\n    setIsBusy(true);\r\n    const app = existingApp || newApp();\r\n    setSelectedApplicationId(app.id);\r\n    setApplication(app);\r\n    const apps = [...applications, app];\r\n    setApplications(apps)\r\n    const menu = [...leftMenu];\r\n    menu[0].items = [...apps];\r\n    setLeftMenu(menu);\r\n    setInitialXml(app.content);\r\n    setToastAction(buildToastAction('Application added', `${app.name} has been successfuly added`, true));\r\n    saveState(apps, app.id, menu);\r\n    setTimeout(() => {\r\n      document.location.reload();\r\n    }, 500);\r\n  }\r\n\r\n  const onOutputDone = (outputList, saveAsNotebook = true) => {\r\n    if (outputList.filter(o => o.isPending === true).length) {\r\n      return;\r\n    }\r\n\r\n    // console.log('outputList: ', JSON.stringify(outputList))\r\n\r\n    const elements = [];\r\n    for (const item of outputList) {\r\n      const arrayItems = ['chains', 'tools']\r\n      for (const arrayItemName of arrayItems) {\r\n        if (!!item['source'][arrayItemName]) {\r\n          for (const chainItem of item['source'][arrayItemName]) {\r\n            const propName = Object.keys(chainItem)[0]\r\n            const prop = chainItem[propName]\r\n            if (Array.isArray(prop)) {\r\n              const prompts = []\r\n              for (const innerItem of prop) {\r\n                const innerPropName = Object.keys(innerItem)[0]\r\n                const innerProp = innerItem[innerPropName]\r\n                prompts.push({\r\n                  type: innerPropName.toUpperCase(),\r\n                  name: innerProp['type']['type'],\r\n                  arguments: innerProp['type']['settings'],\r\n                  index: 0,\r\n                });              \r\n              }\r\n              elements.push({\r\n                type: prompts[0].type,\r\n                name: prompts.map(p => p.arguments[0].value).join('. '),\r\n                arguments: [],\r\n                index: 99999999\r\n              })\r\n            } else {\r\n              elements.push({\r\n                type: propName.toUpperCase().replace('VECTORSTORE', 'STORE'),\r\n                name: prop['type']['type'],\r\n                arguments: prop['type']['settings'],\r\n                index: 0,\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    const api = window['api'];\r\n    api.buildLangChain({ elements: elements })\r\n      .then(json => {\r\n        const content = json.lines.join('\\n')\r\n        const out = {\r\n          content,\r\n          mimeType: 'application/python',\r\n          extension: 'py',\r\n        };\r\n        downloader(out.content, out.mimeType, `${window['applicationName'] || application.name}.${out.extension}`);\r\n        setIsBusy(false);    \r\n      });\r\n  }\r\n\r\n  const saveApplication = () => {\r\n    setIsBusy(true);\r\n    window['api'] = ctx.api;\r\n    window['onOutputDone'] = isRemote ? onOutputDone: (outputList, saveAsNotebook) => {};\r\n    const json = JSON.parse(JSON.parse(BlocklyPython.workspaceToCode(simpleWorkspace.workspace)));\r\n\r\n    const xml = Blockly.Xml.workspaceToDom(simpleWorkspace.workspace);\r\n    const content = Blockly.Xml.domToText(xml);\r\n\r\n    const app = {\r\n      id: application.id,\r\n      name: json.name,\r\n      content: content,\r\n      json: json\r\n    };\r\n    window['applicationName'] = app.name;\r\n    const tmpApps = [...applications];\r\n    tmpApps.splice(tmpApps.indexOf(application), 1, app);\r\n    const apps = [\r\n      ...tmpApps,\r\n    ];\r\n    setApplication(app);\r\n    setApplications(apps);\r\n    const menu = [...leftMenu];\r\n    menu[0].items = [...apps];\r\n    setLeftMenu(menu);\r\n    setToastAction(buildToastAction('Application saved', `${app.name} has been successfuly saved`, true));\r\n    saveState(apps, selectedApplicationId, menu, false);\r\n\r\n    if (!isRemote) onOutputDone(window['output']);\r\n  }\r\n\r\n  const downloadApplications = () => {\r\n    const apps = [...applications];\r\n    apps.forEach(a => {\r\n      const origName = a.name;\r\n      a.name = `${a.name}-Sample`;\r\n      if (a.content.indexOf(a.name) < 0) a.content = a.content.replace(`>${origName}<`, `>${a.name}<`);\r\n      a.json = {};\r\n    });\r\n    downloader(JSON.stringify(apps), 'application/json', `sample-applications.json`);\r\n  }\r\n\r\n  const downloadUri = (uri: string, name: string) => {\r\n    const link = document.createElement('a');\r\n    link.download = name;\r\n    link.href = uri;\r\n    link.click();\r\n  }\r\n\r\n  const downloader = (data: BlobPart, type: string, name: string) => {\r\n    const blob = new Blob([data], { type });\r\n    let url = window.URL.createObjectURL(blob);\r\n    downloadUri(url, name);\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n\r\n  window.onload = (ev: Event) => setIsBusy(false);\r\n\r\n  const raisedEvent = (e: any) => {\r\n    if (e instanceof Blockly.Events.Ui) {\r\n      return;  // Don't mirror UI events.\r\n    }\r\n    var json = e.toJson();\r\n    const fields = [\"PLATFORM\", \"TEMPLATE\", \"TRAIN\", \"FLAVOR\"];\r\n    switch (json.type) {\r\n      case \"create\":\r\n        const xml = json.xml;\r\n        const matches = xmlFields(xml, fields);\r\n        fields.forEach((f: any) => {\r\n          window[f] = matches.find(m => m.name === f)?.value;\r\n        });\r\n        break;\r\n      case \"change\":\r\n        if (fields.includes(json.name)) {\r\n          window[json.name] = json.newValue.toLowerCase();\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Layout onItemSelected={onItemSelected} onItemRemoved={onItemRemoved} onItemClonned={onItemClonned} topMenu={topMenu} leftMenu={leftMenu} isBusy={isBusy}>\r\n        <BlocklyComponent ref={(e: BlocklyComponent) => {\r\n          simpleWorkspace = e;\r\n          if (!!e) e.primaryWorkspace.addChangeListener(raisedEvent)\r\n        }}\r\n          theme={BlocklyCore.Themes.Dark}\r\n          readOnly={false}\r\n          trashcan={true}\r\n          media={'media/'}\r\n          move={{\r\n            scrollbars: false,\r\n            drag: true,\r\n            wheel: true\r\n          }}\r\n          zoom={{\r\n            controls: true,\r\n            wheel: true,\r\n            startScale: 1,\r\n            maxScale: 3,\r\n            minScale: 0.3,\r\n            scaleSpeed: 1.2\r\n          }}\r\n          grid={{\r\n            spacing: 20,\r\n            length: 1,\r\n            snap: true\r\n          }}\r\n          initialXml={initialXml}>\r\n          <Block type=\"chains\" />\r\n          <Block type=\"custom_chain_field\" />\r\n          <Block type=\"tools\" />\r\n          <Block type=\"custom_tool_field\" />\r\n          <Block type=\"custom_util_field\" />\r\n          <Block type=\"custom_llm_field\" />\r\n          <Block type=\"custom_loader_field\" />\r\n          <Block type=\"custom_splitter_field\" />\r\n          <Block type=\"custom_embedding_field\" />\r\n          <Block type=\"custom_retriever_field\" />\r\n          <Block type=\"custom_memory_field\" />\r\n          <Block type=\"custom_vectorstore_field\" />\r\n          <Block type=\"custom_chat_model_field\" />\r\n          <Block type=\"custom_chat_message_field\" />\r\n          <Block type=\"custom_chat_prompt_field\" />\r\n          <Block type=\"prompts\" />\r\n          <Block type=\"custom_prompt_field\" />\r\n        </BlocklyComponent>\r\n      </Layout>\r\n      {toastAction.isVisible && <ToastMessage title={toastAction.title} message={toastAction.message} onClose={e => setToastAction(defaultToastAction)} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { eRunMode } from './types';\r\n\r\nconst config = {\r\n    runMode: eRunMode.Local,\r\n    apiUrl: 'https://langchain-api.onrender.com/api',\r\n}\r\n\r\nexport default config;\r\n","import {\r\n    faFolderOpen,\r\n    faSave,\r\n    faPlusSquare,\r\n    faLightbulb,\r\n    faFileImage,\r\n    faArrowAltCircleDown\r\n} from \"@fortawesome/free-regular-svg-icons\";\r\nimport { newApp, APPLICATIONS_KEY, SELECTED_APPLICATION_ID_KEY } from './utils';\r\nimport { IDataContext, IApplication, ILeftMenu } from './types';\r\nimport config from './config';\r\n\r\nconst sampleApplications = require('./blocks/json-definitions/sample-applications.json');\r\n\r\nconst getDefaultApp = () => {\r\n    const applications = [newApp()];\r\n    localStorage.setItem(APPLICATIONS_KEY, JSON.stringify(applications));\r\n    localStorage.setItem(SELECTED_APPLICATION_ID_KEY, applications[0].id);\r\n    return applications;\r\n}\r\nconst _getApplications = (): IApplication[] =>\r\n    JSON.parse(localStorage.getItem(APPLICATIONS_KEY) || '[]') || getDefaultApp();\r\n\r\nconst _getSelectedApplicationId = (): string =>\r\n    localStorage.getItem(SELECTED_APPLICATION_ID_KEY) || '';\r\n\r\nlet _leftMenu: ILeftMenu[] = [\r\n    {\r\n        label: 'Applications',\r\n        link: '#applications',\r\n        icon: faFolderOpen,\r\n        items: _getApplications(),\r\n    }\r\n];\r\n\r\nconst _requestOptions = (method: string = 'get', mimeType: string = 'application/json'): RequestInit => ({\r\n    method: method,\r\n    mode: 'cors',\r\n    headers: {\r\n        'Accept': mimeType\r\n    },\r\n});\r\n\r\nconst localDataContext: IDataContext = {\r\n    whoAmI: 'local context',\r\n    store: {\r\n        getApplications: _getApplications,\r\n        setApplications: (apps) => localStorage.setItem(APPLICATIONS_KEY, JSON.stringify(apps)),\r\n        getSelectedApplicationId: _getSelectedApplicationId,\r\n        setSelectedApplicationId: (id) => localStorage.setItem(SELECTED_APPLICATION_ID_KEY, id),\r\n        getTopMenu: () => [\r\n            {\r\n                label: 'New',\r\n                link: '#new',\r\n                icon: faPlusSquare,\r\n                options: undefined,\r\n            },\r\n            {\r\n                label: '+ Sample',\r\n                link: '#add-sample',\r\n                icon: faLightbulb,\r\n                options: sampleApplications.map((app: IApplication) => (\r\n                    {\r\n                        label: app.name,\r\n                        link: '#add-sample',\r\n                        icon: faFileImage,\r\n                        app\r\n                    }\r\n                ))\r\n            },\r\n            {\r\n                label: 'Download',\r\n                link: '#download',\r\n                icon: faArrowAltCircleDown,\r\n                options: undefined,\r\n            },\r\n            {\r\n                label: 'Save',\r\n                link: '#save',\r\n                icon: faSave,\r\n                options: undefined,\r\n            }\r\n        ],\r\n        getLeftMenu: () => _leftMenu,\r\n        setLeftMenu: (menu) => _leftMenu = [...menu],\r\n    },\r\n    api: {\r\n        buildLangChain: async (elements: any) => {\r\n            const reqOptions = _requestOptions('post');\r\n            const res = await fetch(`${config.apiUrl}/build-app`, {\r\n                ...reqOptions,\r\n                headers: {\r\n                    ...reqOptions.headers,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(elements),\r\n            });\r\n            const json = await res.json();\r\n            return json;\r\n        },\r\n    }\r\n}\r\n\r\nexport default localDataContext;\r\n","import { IDataContext } from './types';\r\nimport LocalDataContext from './local-store-context';\r\n\r\nconst remoteDataContext: IDataContext = {\r\n    whoAmI: 'remote context',\r\n    store: LocalDataContext.store,\r\n    api: {\r\n        buildLangChain: async (elements: any) => '',\r\n    }\r\n}\r\n\r\nexport default remoteDataContext;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { eRunMode } from './types';\r\nimport DataContext from './context';\r\nimport LocalDataContext from './local-store-context';\r\nimport RemoteDataContext from './remote-store-context';\r\n\r\nimport config from './config';\r\nconst dataContext = config.runMode === eRunMode.Local \r\n    ? LocalDataContext\r\n    : RemoteDataContext;\r\n\r\nReactDOM.render(\r\n    (<DataContext.Provider value={dataContext}>\r\n        <App />\r\n    </DataContext.Provider>)\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}