{
    "sections": [
        {
            "name": "chat_prompts",
            "tag": "CHAT_PROMPT",
            "path": "langchain.prompts",
            "docs": "/modules/prompts.html",
            "options": [
                {
                    "name": "AIMessagePromptTemplate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.StringPromptTemplate",
                            "value": ""
                        },
                        {
                            "name": "additional_kwargs",
                            "type": "dict",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BaseChatPromptTemplate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "input_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "output_parser",
                            "type": "Optional[langchain.schema.BaseOutputParser]",
                            "value": "None"
                        },
                        {
                            "name": "partial_variables",
                            "type": "Mapping[str, Union[str, Callable[[], str]]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BasePromptTemplate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "input_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "output_parser",
                            "type": "Optional[langchain.schema.BaseOutputParser]",
                            "value": "None"
                        },
                        {
                            "name": "partial_variables",
                            "type": "Mapping[str, Union[str, Callable[[], str]]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ChatMessagePromptTemplate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.StringPromptTemplate",
                            "value": ""
                        },
                        {
                            "name": "additional_kwargs",
                            "type": "dict",
                            "value": "None"
                        },
                        {
                            "name": "role",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ChatPromptTemplate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "input_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "output_parser",
                            "type": "Optional[langchain.schema.BaseOutputParser]",
                            "value": "None"
                        },
                        {
                            "name": "partial_variables",
                            "type": "Mapping[str, Union[str, Callable[[], str]]]",
                            "value": "None"
                        },
                        {
                            "name": "messages",
                            "type": "List[Union[langchain.prompts.chat.BaseMessagePromptTemplate, langchain.schema.BaseMessage]]",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "FewShotPromptTemplate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "input_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "output_parser",
                            "type": "Optional[langchain.schema.BaseOutputParser]",
                            "value": "None"
                        },
                        {
                            "name": "partial_variables",
                            "type": "Mapping[str, Union[str, Callable[[], str]]]",
                            "value": "None"
                        },
                        {
                            "name": "examples",
                            "type": "Optional[List[dict]]",
                            "value": "None"
                        },
                        {
                            "name": "example_selector",
                            "type": "Optional[langchain.prompts.example_selector.base.BaseExampleSelector]",
                            "value": "None"
                        },
                        {
                            "name": "example_prompt",
                            "type": "langchain.prompts.prompt.PromptTemplate",
                            "value": ""
                        },
                        {
                            "name": "suffix",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "example_separator",
                            "type": "str",
                            "value": "'\\n\\n'"
                        },
                        {
                            "name": "prefix",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "template_format",
                            "type": "str",
                            "value": "'f-string'"
                        },
                        {
                            "name": "validate_template",
                            "type": "bool",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "FewShotPromptWithTemplates",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "input_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "output_parser",
                            "type": "Optional[langchain.schema.BaseOutputParser]",
                            "value": "None"
                        },
                        {
                            "name": "partial_variables",
                            "type": "Mapping[str, Union[str, Callable[[], str]]]",
                            "value": "None"
                        },
                        {
                            "name": "examples",
                            "type": "Optional[List[dict]]",
                            "value": "None"
                        },
                        {
                            "name": "example_selector",
                            "type": "Optional[langchain.prompts.example_selector.base.BaseExampleSelector]",
                            "value": "None"
                        },
                        {
                            "name": "example_prompt",
                            "type": "langchain.prompts.prompt.PromptTemplate",
                            "value": ""
                        },
                        {
                            "name": "suffix",
                            "type": "langchain.prompts.base.StringPromptTemplate",
                            "value": ""
                        },
                        {
                            "name": "example_separator",
                            "type": "str",
                            "value": "'\\n\\n'"
                        },
                        {
                            "name": "prefix",
                            "type": "Optional[langchain.prompts.base.StringPromptTemplate]",
                            "value": "None"
                        },
                        {
                            "name": "template_format",
                            "type": "str",
                            "value": "'f-string'"
                        },
                        {
                            "name": "validate_template",
                            "type": "bool",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HumanMessagePromptTemplate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.StringPromptTemplate",
                            "value": ""
                        },
                        {
                            "name": "additional_kwargs",
                            "type": "dict",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MessagesPlaceholder",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "variable_name",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PromptTemplate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "input_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "output_parser",
                            "type": "Optional[langchain.schema.BaseOutputParser]",
                            "value": "None"
                        },
                        {
                            "name": "partial_variables",
                            "type": "Mapping[str, Union[str, Callable[[], str]]]",
                            "value": "None"
                        },
                        {
                            "name": "template",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "template_format",
                            "type": "str",
                            "value": "'f-string'"
                        },
                        {
                            "name": "validate_template",
                            "type": "bool",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "StringPromptTemplate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "input_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "output_parser",
                            "type": "Optional[langchain.schema.BaseOutputParser]",
                            "value": "None"
                        },
                        {
                            "name": "partial_variables",
                            "type": "Mapping[str, Union[str, Callable[[], str]]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SystemMessagePromptTemplate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.StringPromptTemplate",
                            "value": ""
                        },
                        {
                            "name": "additional_kwargs",
                            "type": "dict",
                            "value": "None"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "llms",
            "tag": "LLM",
            "path": "langchain.llms",
            "docs": "/modules/models/llms/integrations.html",
            "options": [
                {
                    "name": "AI21",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'j2-jumbo-instruct'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "maxTokens",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "minTokens",
                            "type": "int",
                            "value": "0"
                        },
                        {
                            "name": "topP",
                            "type": "float",
                            "value": "1.0"
                        },
                        {
                            "name": "presencePenalty",
                            "type": "langchain.llms.ai21.AI21PenaltyData",
                            "value": "AI21PenaltyData"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AlephAlpha",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "Optional[str]",
                            "value": "'luminous-base'"
                        },
                        {
                            "name": "maximum_tokens",
                            "type": "int",
                            "value": "64"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.0"
                        },
                        {
                            "name": "top_k",
                            "type": "int",
                            "value": "0"
                        },
                        {
                            "name": "top_p",
                            "type": "float",
                            "value": "0.0"
                        },
                        {
                            "name": "presence_penalty",
                            "type": "float",
                            "value": "0.0"
                        },
                        {
                            "name": "frequency_penalty",
                            "type": "float",
                            "value": "0.0"
                        },
                        {
                            "name": "repetition_penalties_include_prompt",
                            "type": "Optional[bool]",
                            "value": "False"
                        },
                        {
                            "name": "use_multiplicative_presence_penalty",
                            "type": "Optional[bool]",
                            "value": "False"
                        },
                        {
                            "name": "penalty_bias",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "penalty_exceptions",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "penalty_exceptions_include_stop_sequences",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "best_of",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "logit_bias",
                            "type": "Optional[Dict[int, float]]",
                            "value": "None"
                        },
                        {
                            "name": "log_probs",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "tokens",
                            "type": "Optional[bool]",
                            "value": "False"
                        },
                        {
                            "name": "disable_optimizations",
                            "type": "Optional[bool]",
                            "value": "False"
                        },
                        {
                            "name": "minimum_tokens",
                            "type": "Optional[int]",
                            "value": "0"
                        },
                        {
                            "name": "echo",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "use_multiplicative_frequency_penalty",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "sequence_penalty",
                            "type": "float",
                            "value": "0.0"
                        },
                        {
                            "name": "sequence_penalty_min_length",
                            "type": "int",
                            "value": "2"
                        },
                        {
                            "name": "use_multiplicative_sequence_penalty",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "completion_bias_inclusion",
                            "type": "Optional[Sequence[str]]",
                            "value": "None"
                        },
                        {
                            "name": "completion_bias_inclusion_first_token_only",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "completion_bias_exclusion",
                            "type": "Optional[Sequence[str]]",
                            "value": "None"
                        },
                        {
                            "name": "completion_bias_exclusion_first_token_only",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "contextual_control_threshold",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "control_log_additive",
                            "type": "Optional[bool]",
                            "value": "True"
                        },
                        {
                            "name": "repetition_penalties_include_completion",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "raw_completion",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "aleph_alpha_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "stop_sequences",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Anthropic",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'claude-v1'"
                        },
                        {
                            "name": "max_tokens_to_sample",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "temperature",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "top_k",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "top_p",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "default_request_timeout",
                            "type": "Union[float, Tuple[float, float], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "anthropic_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "HUMAN_PROMPT",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "AI_PROMPT",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "count_tokens",
                            "type": "Optional[Callable[[str], int]]",
                            "value": "None"
                        },
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Anyscale",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "anyscale_service_url",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "anyscale_service_route",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "anyscale_service_token",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AzureOpenAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'text-davinci-003'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "max_tokens",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "top_p",
                            "type": "float",
                            "value": "1"
                        },
                        {
                            "name": "frequency_penalty",
                            "type": "float",
                            "value": "0"
                        },
                        {
                            "name": "presence_penalty",
                            "type": "float",
                            "value": "0"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "best_of",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_base",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_organization",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_proxy",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "batch_size",
                            "type": "int",
                            "value": "20"
                        },
                        {
                            "name": "request_timeout",
                            "type": "Union[float, Tuple[float, float], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "logit_bias",
                            "type": "Optional[Dict[str, float]]",
                            "value": "None"
                        },
                        {
                            "name": "max_retries",
                            "type": "int",
                            "value": "6"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "allowed_special",
                            "type": "Union[Literal['all'], AbstractSet[str]]",
                            "value": "set"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Banana",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "model_key",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "banana_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Beam",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "name",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "cpu",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "memory",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "gpu",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "python_version",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "python_packages",
                            "type": "List[str]",
                            "value": "[]"
                        },
                        {
                            "name": "max_length",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "url",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "beam_client_id",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "beam_client_secret",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "app_id",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Bedrock",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "region_name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "credentials_profile_name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[Dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "CTransformers",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "model_type",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_file",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "config",
                            "type": "Optional[Dict[str, Any]]",
                            "value": "None"
                        },
                        {
                            "name": "lib",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "CerebriumAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "endpoint_url",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cerebriumai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Cohere",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "max_tokens",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.75"
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "0"
                        },
                        {
                            "name": "p",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "frequency_penalty",
                            "type": "float",
                            "value": "0.0"
                        },
                        {
                            "name": "presence_penalty",
                            "type": "float",
                            "value": "0.0"
                        },
                        {
                            "name": "truncate",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "max_retries",
                            "type": "int",
                            "value": "10"
                        },
                        {
                            "name": "cohere_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "stop",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Databricks",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "host",
                            "type": "str",
                            "value": "None"
                        },
                        {
                            "name": "api_token",
                            "type": "str",
                            "value": "None"
                        },
                        {
                            "name": "endpoint_name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "cluster_id",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "cluster_driver_port",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[Dict[str, Any]]",
                            "value": "None"
                        },
                        {
                            "name": "transform_input_fn",
                            "type": "Optional[Callable]",
                            "value": "None"
                        },
                        {
                            "name": "transform_output_fn",
                            "type": "Optional[Callable[..., str]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DeepInfra",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "model_id",
                            "type": "str",
                            "value": "'google/flan-t5-xl'"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "deepinfra_api_token",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "FakeListLLM",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "responses",
                            "type": "List",
                            "value": ""
                        },
                        {
                            "name": "i",
                            "type": "int",
                            "value": "0"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ForefrontAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "endpoint_url",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "length",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "top_p",
                            "type": "float",
                            "value": "1.0"
                        },
                        {
                            "name": "top_k",
                            "type": "int",
                            "value": "40"
                        },
                        {
                            "name": "repetition_penalty",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "forefrontai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "base_url",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GPT4All",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "backend",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "n_ctx",
                            "type": "int",
                            "value": "512"
                        },
                        {
                            "name": "n_parts",
                            "type": "int",
                            "value": "-1"
                        },
                        {
                            "name": "seed",
                            "type": "int",
                            "value": "0"
                        },
                        {
                            "name": "f16_kv",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "logits_all",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "vocab_only",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "use_mlock",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "embedding",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "n_threads",
                            "type": "Optional[int]",
                            "value": "4"
                        },
                        {
                            "name": "n_predict",
                            "type": "Optional[int]",
                            "value": "256"
                        },
                        {
                            "name": "temp",
                            "type": "Optional[float]",
                            "value": "0.8"
                        },
                        {
                            "name": "top_p",
                            "type": "Optional[float]",
                            "value": "0.95"
                        },
                        {
                            "name": "top_k",
                            "type": "Optional[int]",
                            "value": "40"
                        },
                        {
                            "name": "echo",
                            "type": "Optional[bool]",
                            "value": "False"
                        },
                        {
                            "name": "stop",
                            "type": "Optional[List[str]]",
                            "value": "[]"
                        },
                        {
                            "name": "repeat_last_n",
                            "type": "Optional[int]",
                            "value": "64"
                        },
                        {
                            "name": "repeat_penalty",
                            "type": "Optional[float]",
                            "value": "1.3"
                        },
                        {
                            "name": "n_batch",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "context_erase",
                            "type": "float",
                            "value": "0.5"
                        },
                        {
                            "name": "allow_download",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "!pip install gpt4all",
                            "imports": "from langchain.llms import GPT4All",
                            "template": "\nllm = GPT4All(model=\"./ggml-mpt-7b-instruct.bin\", n_ctx={n_ctx}, backend=\"mpt\", verbose=False)\n                        "
                        }
                    ]
                },
                {
                    "name": "GooglePalm",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "google_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "'models/text-bison-001'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "top_p",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "top_k",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "max_output_tokens",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GooseAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "'gpt-neo-20b'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "max_tokens",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "top_p",
                            "type": "float",
                            "value": "1"
                        },
                        {
                            "name": "min_tokens",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "frequency_penalty",
                            "type": "float",
                            "value": "0"
                        },
                        {
                            "name": "presence_penalty",
                            "type": "float",
                            "value": "0"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "logit_bias",
                            "type": "Optional[Dict[str, float]]",
                            "value": "None"
                        },
                        {
                            "name": "gooseai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HuggingFaceEndpoint",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "endpoint_url",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "task",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "huggingfacehub_api_token",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HuggingFaceHub",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "repo_id",
                            "type": "str",
                            "value": "'gpt2'"
                        },
                        {
                            "name": "task",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "huggingfacehub_api_token",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HuggingFacePipeline",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "pipeline",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_id",
                            "type": "str",
                            "value": "'gpt2'"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "pipeline_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HuggingFaceTextGenInference",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "max_new_tokens",
                            "type": "int",
                            "value": "512"
                        },
                        {
                            "name": "top_k",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "top_p",
                            "type": "Optional[float]",
                            "value": "0.95"
                        },
                        {
                            "name": "typical_p",
                            "type": "Optional[float]",
                            "value": "0.95"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.8"
                        },
                        {
                            "name": "repetition_penalty",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "stop_sequences",
                            "type": "List[str]",
                            "value": "None"
                        },
                        {
                            "name": "seed",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "inference_server_url",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "timeout",
                            "type": "int",
                            "value": "120"
                        },
                        {
                            "name": "stream",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HumanInputLLM",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "input_func",
                            "type": "Callable",
                            "value": "None"
                        },
                        {
                            "name": "prompt_func",
                            "type": "Callable[[str], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "separator",
                            "type": "str",
                            "value": "'\\n'"
                        },
                        {
                            "name": "input_kwargs",
                            "type": "Mapping[str, Any]",
                            "value": "{}"
                        },
                        {
                            "name": "prompt_kwargs",
                            "type": "Mapping[str, Any]",
                            "value": "{}"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "LlamaCpp",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "lora_base",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "lora_path",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "n_ctx",
                            "type": "int",
                            "value": "512"
                        },
                        {
                            "name": "n_parts",
                            "type": "int",
                            "value": "-1"
                        },
                        {
                            "name": "seed",
                            "type": "int",
                            "value": "-1"
                        },
                        {
                            "name": "f16_kv",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "logits_all",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "vocab_only",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "use_mlock",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "n_threads",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "n_batch",
                            "type": "Optional[int]",
                            "value": "8"
                        },
                        {
                            "name": "n_gpu_layers",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "suffix",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "max_tokens",
                            "type": "Optional[int]",
                            "value": "256"
                        },
                        {
                            "name": "temperature",
                            "type": "Optional[float]",
                            "value": "0.8"
                        },
                        {
                            "name": "top_p",
                            "type": "Optional[float]",
                            "value": "0.95"
                        },
                        {
                            "name": "logprobs",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "echo",
                            "type": "Optional[bool]",
                            "value": "False"
                        },
                        {
                            "name": "stop",
                            "type": "Optional[List[str]]",
                            "value": "[]"
                        },
                        {
                            "name": "repeat_penalty",
                            "type": "Optional[float]",
                            "value": "1.1"
                        },
                        {
                            "name": "top_k",
                            "type": "Optional[int]",
                            "value": "40"
                        },
                        {
                            "name": "last_n_tokens_size",
                            "type": "Optional[int]",
                            "value": "64"
                        },
                        {
                            "name": "use_mmap",
                            "type": "Optional[bool]",
                            "value": "True"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Modal",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "endpoint_url",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MosaicML",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "endpoint_url",
                            "type": "str",
                            "value": "'https://models.hosted-on.mosaicml.hosting/mpt-7b-instruct/v1/predict'"
                        },
                        {
                            "name": "inject_instruction_format",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "retry_sleep",
                            "type": "float",
                            "value": "1.0"
                        },
                        {
                            "name": "mosaicml_api_token",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "NLPCloud",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "'finetuned-gpt-neox-20b'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "min_length",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "max_length",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "length_no_input",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "remove_input",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "remove_end_sequence",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "bad_words",
                            "type": "List[str]",
                            "value": "[]"
                        },
                        {
                            "name": "top_p",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "top_k",
                            "type": "int",
                            "value": "50"
                        },
                        {
                            "name": "repetition_penalty",
                            "type": "float",
                            "value": "1.0"
                        },
                        {
                            "name": "length_penalty",
                            "type": "float",
                            "value": "1.0"
                        },
                        {
                            "name": "do_sample",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "num_beams",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "early_stopping",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "num_return_sequences",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "nlpcloud_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OpenAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'text-davinci-003'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "max_tokens",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "top_p",
                            "type": "float",
                            "value": "1"
                        },
                        {
                            "name": "frequency_penalty",
                            "type": "float",
                            "value": "0"
                        },
                        {
                            "name": "presence_penalty",
                            "type": "float",
                            "value": "0"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "best_of",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_base",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_organization",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_proxy",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "batch_size",
                            "type": "int",
                            "value": "20"
                        },
                        {
                            "name": "request_timeout",
                            "type": "Union[float, Tuple[float, float], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "logit_bias",
                            "type": "Optional[Dict[str, float]]",
                            "value": "None"
                        },
                        {
                            "name": "max_retries",
                            "type": "int",
                            "value": "6"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "allowed_special",
                            "type": "Union[Literal['all'], AbstractSet[str]]",
                            "value": "set"
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "!pip install openai",
                            "imports": "from langchain.llms import OpenAI",
                            "template": "\nllm = OpenAI(model=\"{model}\", temperature={temperature}, streaming={streaming})\n                        "
                        }
                    ]
                },
                {
                    "name": "OpenAIChat",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "'gpt-3.5-turbo'"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_base",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_proxy",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "max_retries",
                            "type": "int",
                            "value": "6"
                        },
                        {
                            "name": "prefix_messages",
                            "type": "List",
                            "value": "None"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "allowed_special",
                            "type": "Union[Literal['all'], AbstractSet[str]]",
                            "value": "set"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OpenLM",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'text-davinci-003'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "max_tokens",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "top_p",
                            "type": "float",
                            "value": "1"
                        },
                        {
                            "name": "frequency_penalty",
                            "type": "float",
                            "value": "0"
                        },
                        {
                            "name": "presence_penalty",
                            "type": "float",
                            "value": "0"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "best_of",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_base",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_organization",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_proxy",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "batch_size",
                            "type": "int",
                            "value": "20"
                        },
                        {
                            "name": "request_timeout",
                            "type": "Union[float, Tuple[float, float], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "logit_bias",
                            "type": "Optional[Dict[str, float]]",
                            "value": "None"
                        },
                        {
                            "name": "max_retries",
                            "type": "int",
                            "value": "6"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "allowed_special",
                            "type": "Union[Literal['all'], AbstractSet[str]]",
                            "value": "set"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Petals",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "tokenizer",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "'bigscience/bloom-petals'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "max_new_tokens",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "top_p",
                            "type": "float",
                            "value": "0.9"
                        },
                        {
                            "name": "top_k",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "do_sample",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "max_length",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "huggingface_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PipelineAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "pipeline_key",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "pipeline_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "pipeline_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PredictionGuard",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "Optional[str]",
                            "value": "'MPT-7B-Instruct'"
                        },
                        {
                            "name": "output",
                            "type": "Optional[Dict[str, Any]]",
                            "value": "None"
                        },
                        {
                            "name": "max_tokens",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.75"
                        },
                        {
                            "name": "token",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "stop",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PromptLayerOpenAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'text-davinci-003'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "max_tokens",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "top_p",
                            "type": "float",
                            "value": "1"
                        },
                        {
                            "name": "frequency_penalty",
                            "type": "float",
                            "value": "0"
                        },
                        {
                            "name": "presence_penalty",
                            "type": "float",
                            "value": "0"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "best_of",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_base",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_organization",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_proxy",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "batch_size",
                            "type": "int",
                            "value": "20"
                        },
                        {
                            "name": "request_timeout",
                            "type": "Union[float, Tuple[float, float], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "logit_bias",
                            "type": "Optional[Dict[str, float]]",
                            "value": "None"
                        },
                        {
                            "name": "max_retries",
                            "type": "int",
                            "value": "6"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "allowed_special",
                            "type": "Union[Literal['all'], AbstractSet[str]]",
                            "value": "set"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PromptLayerOpenAIChat",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "'gpt-3.5-turbo'"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_base",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_proxy",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "max_retries",
                            "type": "int",
                            "value": "6"
                        },
                        {
                            "name": "prefix_messages",
                            "type": "List",
                            "value": "None"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "allowed_special",
                            "type": "Union[Literal['all'], AbstractSet[str]]",
                            "value": "set"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "RWKV",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "tokens_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "strategy",
                            "type": "str",
                            "value": "'cpu fp32'"
                        },
                        {
                            "name": "rwkv_verbose",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "1.0"
                        },
                        {
                            "name": "top_p",
                            "type": "float",
                            "value": "0.5"
                        },
                        {
                            "name": "penalty_alpha_frequency",
                            "type": "float",
                            "value": "0.4"
                        },
                        {
                            "name": "penalty_alpha_presence",
                            "type": "float",
                            "value": "0.4"
                        },
                        {
                            "name": "CHUNK_LEN",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "max_tokens_per_generation",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "tokenizer",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "pipeline",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_tokens",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_state",
                            "type": "Any",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Replicate",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "input",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "replicate_api_token",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SagemakerEndpoint",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "endpoint_name",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "region_name",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "credentials_profile_name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "content_handler",
                            "type": "langchain.llms.sagemaker_endpoint.LLMContentHandler",
                            "value": ""
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[Dict]",
                            "value": "None"
                        },
                        {
                            "name": "endpoint_kwargs",
                            "type": "Optional[Dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SelfHostedHuggingFaceLLM",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "pipeline_ref",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "inference_fn",
                            "type": "Callable",
                            "value": "<function _generate_text at 0x7f3b0ca42830>"
                        },
                        {
                            "name": "hardware",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_load_fn",
                            "type": "Callable",
                            "value": "<function _load_transformer at 0x7f3b0ca42cb0>"
                        },
                        {
                            "name": "load_fn_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "model_reqs",
                            "type": "List[str]",
                            "value": "['./', 'transformers', 'torch']"
                        },
                        {
                            "name": "model_id",
                            "type": "str",
                            "value": "'gpt2'"
                        },
                        {
                            "name": "task",
                            "type": "str",
                            "value": "'text-generation'"
                        },
                        {
                            "name": "device",
                            "type": "int",
                            "value": "0"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SelfHostedPipeline",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "pipeline_ref",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "inference_fn",
                            "type": "Callable",
                            "value": "<function _generate_text at 0x7efbf4836680>"
                        },
                        {
                            "name": "hardware",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_load_fn",
                            "type": "Callable",
                            "value": ""
                        },
                        {
                            "name": "load_fn_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "model_reqs",
                            "type": "List[str]",
                            "value": "['./', 'torch']"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "StochasticAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "api_url",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "stochasticai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "VertexAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Writer",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "writer_org_id",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_id",
                            "type": "str",
                            "value": "'palmyra-instruct'"
                        },
                        {
                            "name": "min_tokens",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "max_tokens",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "temperature",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "top_p",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "stop",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "presence_penalty",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "repetition_penalty",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "best_of",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "logprobs",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "n",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "writer_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "base_url",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "chains",
            "tag": "CHAIN",
            "path": "langchain.chains",
            "docs": "/modules/chains/how_to_guides.html",
            "options": [
                {
                    "name": "APIChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "api_request_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "api_answer_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "requests_wrapper",
                            "type": "langchain.requests.TextRequestsWrapper",
                            "value": ""
                        },
                        {
                            "name": "api_docs",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "question_key",
                            "type": "str",
                            "value": "'question'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'output'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AnalyzeDocumentChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'input_document'"
                        },
                        {
                            "name": "text_splitter",
                            "type": "langchain.text_splitter.TextSplitter",
                            "value": "None"
                        },
                        {
                            "name": "combine_docs_chain",
                            "type": "langchain.chains.combine_documents.base.BaseCombineDocumentsChain",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ChatVectorDBChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "combine_docs_chain",
                            "type": "langchain.chains.combine_documents.base.BaseCombineDocumentsChain",
                            "value": ""
                        },
                        {
                            "name": "question_generator",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'answer'"
                        },
                        {
                            "name": "return_source_documents",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "return_generated_question",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "get_chat_history",
                            "type": "Optional[Callable[[Union[Tuple[str, str], langchain.schema.BaseMessage]], str]]",
                            "value": "None"
                        },
                        {
                            "name": "vectorstore",
                            "type": "langchain.vectorstores.base.VectorStore",
                            "value": ""
                        },
                        {
                            "name": "top_k_docs_for_context",
                            "type": "int",
                            "value": "4"
                        },
                        {
                            "name": "search_kwargs",
                            "type": "dict",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConstitutionalChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "constitutional_principles",
                            "type": "List[langchain.chains.constitutional_ai.models.ConstitutionalPrinciple]",
                            "value": ""
                        },
                        {
                            "name": "critique_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "revision_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "return_intermediate_steps",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConversationChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "langchain.schema.BaseMemory",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.BasePromptTemplate",
                            "value": "PromptTemplate"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConversationalRetrievalChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "combine_docs_chain",
                            "type": "langchain.chains.combine_documents.base.BaseCombineDocumentsChain",
                            "value": ""
                        },
                        {
                            "name": "question_generator",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'answer'"
                        },
                        {
                            "name": "return_source_documents",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "return_generated_question",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "get_chat_history",
                            "type": "Optional[Callable[[Union[Tuple[str, str], langchain.schema.BaseMessage]], str]]",
                            "value": "None"
                        },
                        {
                            "name": "retriever",
                            "type": "langchain.schema.BaseRetriever",
                            "value": ""
                        },
                        {
                            "name": "max_tokens_limit",
                            "type": "Optional[int]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "FlareChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "question_generator_chain",
                            "type": "langchain.chains.flare.base.QuestionGeneratorChain",
                            "value": ""
                        },
                        {
                            "name": "response_chain",
                            "type": "langchain.chains.flare.base._ResponseChain",
                            "value": "None"
                        },
                        {
                            "name": "output_parser",
                            "type": "langchain.chains.flare.prompts.FinishedOutputParser",
                            "value": "None"
                        },
                        {
                            "name": "retriever",
                            "type": "langchain.schema.BaseRetriever",
                            "value": ""
                        },
                        {
                            "name": "min_prob",
                            "type": "float",
                            "value": "0.2"
                        },
                        {
                            "name": "min_token_gap",
                            "type": "int",
                            "value": "5"
                        },
                        {
                            "name": "num_pad_tokens",
                            "type": "int",
                            "value": "2"
                        },
                        {
                            "name": "max_iter",
                            "type": "int",
                            "value": "10"
                        },
                        {
                            "name": "start_with_retrieval",
                            "type": "bool",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GraphCypherQAChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "graph",
                            "type": "langchain.graphs.neo4j_graph.Neo4jGraph",
                            "value": ""
                        },
                        {
                            "name": "cypher_generation_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "qa_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'query'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'result'"
                        },
                        {
                            "name": "top_k",
                            "type": "int",
                            "value": "10"
                        },
                        {
                            "name": "return_intermediate_steps",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GraphQAChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "graph",
                            "type": "langchain.graphs.networkx_graph.NetworkxEntityGraph",
                            "value": ""
                        },
                        {
                            "name": "entity_extraction_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "qa_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'query'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'result'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HypotheticalDocumentEmbedder",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "base_embeddings",
                            "type": "langchain.embeddings.base.Embeddings",
                            "value": ""
                        },
                        {
                            "name": "llm_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "LLMBashChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "llm_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "llm",
                            "type": "Optional[langchain.base_language.BaseLanguageModel]",
                            "value": "None"
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'question'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'answer'"
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.BasePromptTemplate",
                            "value": "PromptTemplate"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "LLMChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.BasePromptTemplate",
                            "value": ""
                        },
                        {
                            "name": "llm",
                            "type": "langchain.base_language.BaseLanguageModel",
                            "value": ""
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'text'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "LLMCheckerChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "question_to_checked_assertions_chain",
                            "type": "langchain.chains.sequential.SequentialChain",
                            "value": ""
                        },
                        {
                            "name": "llm",
                            "type": "Optional[langchain.base_language.BaseLanguageModel]",
                            "value": "None"
                        },
                        {
                            "name": "create_draft_answer_prompt",
                            "type": "langchain.prompts.prompt.PromptTemplate",
                            "value": "PromptTemplate"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "LLMMathChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "llm_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "llm",
                            "type": "Optional[langchain.base_language.BaseLanguageModel]",
                            "value": "None"
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.BasePromptTemplate",
                            "value": "PromptTemplate"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "LLMRequestsChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "llm_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "requests_wrapper",
                            "type": "langchain.requests.TextRequestsWrapper",
                            "value": "None"
                        },
                        {
                            "name": "text_length",
                            "type": "int",
                            "value": "8000"
                        },
                        {
                            "name": "requests_key",
                            "type": "str",
                            "value": "'requests_result'"
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'url'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'output'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "LLMSummarizationCheckerChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "sequential_chain",
                            "type": "langchain.chains.sequential.SequentialChain",
                            "value": ""
                        },
                        {
                            "name": "llm",
                            "type": "Optional[langchain.base_language.BaseLanguageModel]",
                            "value": "None"
                        },
                        {
                            "name": "create_assertions_prompt",
                            "type": "langchain.prompts.prompt.PromptTemplate",
                            "value": "PromptTemplate"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MapReduceChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "combine_documents_chain",
                            "type": "langchain.chains.combine_documents.base.BaseCombineDocumentsChain",
                            "value": ""
                        },
                        {
                            "name": "text_splitter",
                            "type": "langchain.text_splitter.TextSplitter",
                            "value": ""
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'input_text'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'output_text'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OpenAIModerationChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "error",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'input'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'output'"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_organization",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OpenAPIEndpointChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "api_request_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "api_response_chain",
                            "type": "Optional[langchain.chains.llm.LLMChain]",
                            "value": "None"
                        },
                        {
                            "name": "api_operation",
                            "type": "langchain.tools.openapi.utils.api_models.APIOperation",
                            "value": ""
                        },
                        {
                            "name": "requests",
                            "type": "langchain.requests.Requests",
                            "value": "None"
                        },
                        {
                            "name": "param_mapping",
                            "type": "langchain.chains.api.openapi.chain._ParamMapping",
                            "value": ""
                        },
                        {
                            "name": "return_intermediate_steps",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "instructions_key",
                            "type": "str",
                            "value": "'instructions'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'output'"
                        },
                        {
                            "name": "max_text_length",
                            "type": "Optional[langchain.chains.api.openapi.chain.ConstrainedIntValue]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PALChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "llm_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "llm",
                            "type": "Optional[langchain.base_language.BaseLanguageModel]",
                            "value": "None"
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.BasePromptTemplate",
                            "value": "PromptTemplate"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "QAGenerationChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "llm_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "text_splitter",
                            "type": "langchain.text_splitter.TextSplitter",
                            "value": "<langchain.text_splitter.RecursiveCharacterTextSplitter object at 0x7ff80e5d85b0>"
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'text'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'questions'"
                        },
                        {
                            "name": "k",
                            "type": "Optional[int]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "QAWithSourcesChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "combine_documents_chain",
                            "type": "langchain.chains.combine_documents.base.BaseCombineDocumentsChain",
                            "value": ""
                        },
                        {
                            "name": "question_key",
                            "type": "str",
                            "value": "'question'"
                        },
                        {
                            "name": "input_docs_key",
                            "type": "str",
                            "value": "'docs'"
                        },
                        {
                            "name": "answer_key",
                            "type": "str",
                            "value": "'answer'"
                        },
                        {
                            "name": "sources_answer_key",
                            "type": "str",
                            "value": "'sources'"
                        },
                        {
                            "name": "return_source_documents",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "RetrievalQA",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "combine_documents_chain",
                            "type": "langchain.chains.combine_documents.base.BaseCombineDocumentsChain",
                            "value": ""
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'query'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'result'"
                        },
                        {
                            "name": "return_source_documents",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "retriever",
                            "type": "langchain.schema.BaseRetriever",
                            "value": ""
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "",
                            "imports": "from langchain.chains import RetrievalQA",
                            "template": "\nqa = RetrievalQA.from_chain_type(\n    llm=llm,\n    chain_type=\"stuff\",\n    retriever=db.as_retriever(search_kwargs={\"k\": 3}),\n    return_source_documents=True,\n    verbose=False,\n)\nres = qa(\"{prompt}\")\nprint(res[\"result\"])\n"
                        }
                    ]
                },
                {
                    "name": "RetrievalQAWithSourcesChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "combine_documents_chain",
                            "type": "langchain.chains.combine_documents.base.BaseCombineDocumentsChain",
                            "value": ""
                        },
                        {
                            "name": "question_key",
                            "type": "str",
                            "value": "'question'"
                        },
                        {
                            "name": "input_docs_key",
                            "type": "str",
                            "value": "'docs'"
                        },
                        {
                            "name": "answer_key",
                            "type": "str",
                            "value": "'answer'"
                        },
                        {
                            "name": "sources_answer_key",
                            "type": "str",
                            "value": "'sources'"
                        },
                        {
                            "name": "return_source_documents",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "retriever",
                            "type": "langchain.schema.BaseRetriever",
                            "value": ""
                        },
                        {
                            "name": "reduce_k_below_max_tokens",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "max_tokens_limit",
                            "type": "int",
                            "value": "3375"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SQLDatabaseChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "llm_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "llm",
                            "type": "Optional[langchain.base_language.BaseLanguageModel]",
                            "value": "None"
                        },
                        {
                            "name": "database",
                            "type": "langchain.sql_database.SQLDatabase",
                            "value": ""
                        },
                        {
                            "name": "prompt",
                            "type": "Optional[langchain.prompts.base.BasePromptTemplate]",
                            "value": "None"
                        },
                        {
                            "name": "top_k",
                            "type": "int",
                            "value": "5"
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'query'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'result'"
                        },
                        {
                            "name": "return_intermediate_steps",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "use_query_checker",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "query_checker_prompt",
                            "type": "Optional[langchain.prompts.base.BasePromptTemplate]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SQLDatabaseSequentialChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "decider_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "sql_chain",
                            "type": "langchain.chains.sql_database.base.SQLDatabaseChain",
                            "value": ""
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'query'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'result'"
                        },
                        {
                            "name": "return_intermediate_steps",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SequentialChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "chains",
                            "type": "List[langchain.chains.base.Chain]",
                            "value": ""
                        },
                        {
                            "name": "input_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "output_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "return_all",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SimpleSequentialChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "chains",
                            "type": "List[langchain.chains.base.Chain]",
                            "value": ""
                        },
                        {
                            "name": "strip_outputs",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'input'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'output'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TransformChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "input_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "output_variables",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "transform",
                            "type": "Callable[[Dict[str, str]], Dict[str, str]]",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "VectorDBQA",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "combine_documents_chain",
                            "type": "langchain.chains.combine_documents.base.BaseCombineDocumentsChain",
                            "value": ""
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'query'"
                        },
                        {
                            "name": "output_key",
                            "type": "str",
                            "value": "'result'"
                        },
                        {
                            "name": "return_source_documents",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "vectorstore",
                            "type": "langchain.vectorstores.base.VectorStore",
                            "value": ""
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "4"
                        },
                        {
                            "name": "search_type",
                            "type": "str",
                            "value": "'similarity'"
                        },
                        {
                            "name": "search_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "VectorDBQAWithSourcesChain",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "Optional[langchain.schema.BaseMemory]",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "combine_documents_chain",
                            "type": "langchain.chains.combine_documents.base.BaseCombineDocumentsChain",
                            "value": ""
                        },
                        {
                            "name": "question_key",
                            "type": "str",
                            "value": "'question'"
                        },
                        {
                            "name": "input_docs_key",
                            "type": "str",
                            "value": "'docs'"
                        },
                        {
                            "name": "answer_key",
                            "type": "str",
                            "value": "'answer'"
                        },
                        {
                            "name": "sources_answer_key",
                            "type": "str",
                            "value": "'sources'"
                        },
                        {
                            "name": "return_source_documents",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "vectorstore",
                            "type": "langchain.vectorstores.base.VectorStore",
                            "value": ""
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "4"
                        },
                        {
                            "name": "reduce_k_below_max_tokens",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "max_tokens_limit",
                            "type": "int",
                            "value": "3375"
                        },
                        {
                            "name": "search_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "tools",
            "tag": "TOOL",
            "path": "langchain.tools",
            "docs": "/modules/agents/tools.html",
            "options": [
                {
                    "name": "AIPluginTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[langchain.tools.plugin.AIPluginToolSchema]",
                            "value": "<class 'langchain.tools.plugin.AIPluginToolSchema'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "plugin",
                            "type": "langchain.tools.plugin.AIPlugin",
                            "value": ""
                        },
                        {
                            "name": "api_spec",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "APIOperation",
                    "args": [
                        {
                            "name": "operation_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "description",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "base_url",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "method",
                            "type": "langchain.tools.openapi.utils.openapi_utils.HTTPVerb",
                            "value": ""
                        },
                        {
                            "name": "properties",
                            "type": "Sequence[langchain.tools.openapi.utils.api_models.APIProperty]",
                            "value": ""
                        },
                        {
                            "name": "request_body",
                            "type": "Optional[langchain.tools.openapi.utils.api_models.APIRequestBody]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AzureCogsFormRecognizerTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'azure_cognitive_services_form_recognizer'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Azure Cognitive Services Form Recognizer. Useful for when you need to extract text, tables, and key-value pairs from documents. Input should be a url to a document.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "azure_cogs_key",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "azure_cogs_endpoint",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "doc_analysis_client",
                            "type": "Any",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AzureCogsImageAnalysisTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'azure_cognitive_services_image_analysis'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Azure Cognitive Services Image Analysis. Useful for when you need to analyze images. Input should be a url to an image.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "azure_cogs_key",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "azure_cogs_endpoint",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "vision_service",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "analysis_options",
                            "type": "Any",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AzureCogsSpeech2TextTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'azure_cognitive_services_speech2text'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Azure Cognitive Services Speech2Text. Useful for when you need to transcribe audio to text. Input should be a url to an audio file.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "azure_cogs_key",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "azure_cogs_region",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "speech_language",
                            "type": "str",
                            "value": "'en-US'"
                        },
                        {
                            "name": "speech_config",
                            "type": "Any",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AzureCogsText2SpeechTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'azure_cognitive_services_text2speech'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Azure Cognitive Services Text2Speech. Useful for when you need to convert text to speech. '"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "azure_cogs_key",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "azure_cogs_region",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "speech_language",
                            "type": "str",
                            "value": "'en-US'"
                        },
                        {
                            "name": "speech_config",
                            "type": "Any",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BaseTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BingSearchResults",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'Bing Search Results JSON'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Bing Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON array of the query results'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "num_results",
                            "type": "int",
                            "value": "4"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.bing_search.BingSearchAPIWrapper",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BingSearchRun",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'bing_search'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Bing Search. Useful for when you need to answer questions about current events. Input should be a search query.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.bing_search.BingSearchAPIWrapper",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BraveSearch",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'brave_search'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'a search engine. useful for when you need to answer questions about current events. input should be a search query.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "search_wrapper",
                            "type": "langchain.utilities.brave_search.BraveSearchWrapper",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ClickTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'click_element'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Click on an element with the given CSS selector'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.playwright.click.ClickToolInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "sync_browser",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "CopyFileTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'copy_file'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Create a copy of a file in a specified location'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.file_management.copy.FileCopyInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "root_dir",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "CurrentWebPageTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'current_webpage'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Returns the URL of the current page'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'pydantic.main.BaseModel'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "sync_browser",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DeleteFileTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'file_delete'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Delete a file'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.file_management.delete.FileDeleteInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "root_dir",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DuckDuckGoSearchResults",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'DuckDuckGo Results JSON'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON array of the query results'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "num_results",
                            "type": "int",
                            "value": "4"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.duckduckgo_search.DuckDuckGoSearchAPIWrapper",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DuckDuckGoSearchRun",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'duckduckgo_search'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around DuckDuckGo Search. Useful for when you need to answer questions about current events. Input should be a search query.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.duckduckgo_search.DuckDuckGoSearchAPIWrapper",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ExtractHyperlinksTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'extract_hyperlinks'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Extract all hyperlinks on the current webpage'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.playwright.extract_hyperlinks.ExtractHyperlinksToolInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "sync_browser",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ExtractTextTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'extract_text'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Extract all the text on the current webpage'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'pydantic.main.BaseModel'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "sync_browser",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "FileSearchTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'file_search'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Recursively search for files in a subdirectory that match the regex pattern'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.file_management.file_search.FileSearchInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "root_dir",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GetElementsTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'get_elements'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Retrieve elements in the current web page matching the given CSS selector'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.playwright.get_elements.GetElementsToolInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "sync_browser",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GmailCreateDraft",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'create_gmail_draft'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Use this tool to create a draft email with the provided message fields.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[langchain.tools.gmail.create_draft.CreateDraftSchema]",
                            "value": "<class 'langchain.tools.gmail.create_draft.CreateDraftSchema'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_resource",
                            "type": "googleapiclient.discovery.Resource",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GmailGetMessage",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'get_gmail_message'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Use this tool to fetch an email by message ID. Returns the thread ID, snipet, body, subject, and sender.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[langchain.tools.gmail.get_message.SearchArgsSchema]",
                            "value": "<class 'langchain.tools.gmail.get_message.SearchArgsSchema'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_resource",
                            "type": "googleapiclient.discovery.Resource",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GmailGetThread",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'get_gmail_thread'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Use this tool to search for email messages. The input must be a valid Gmail query. The output is a JSON list of messages.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[langchain.tools.gmail.get_thread.GetThreadSchema]",
                            "value": "<class 'langchain.tools.gmail.get_thread.GetThreadSchema'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_resource",
                            "type": "googleapiclient.discovery.Resource",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GmailSearch",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'search_gmail'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Use this tool to search for email messages or threads. The input must be a valid Gmail query. The output is a JSON list of the requested resource.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[langchain.tools.gmail.search.SearchArgsSchema]",
                            "value": "<class 'langchain.tools.gmail.search.SearchArgsSchema'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_resource",
                            "type": "googleapiclient.discovery.Resource",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GmailSendMessage",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'send_gmail_message'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Use this tool to send email messages. The input is the message, recipents'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_resource",
                            "type": "googleapiclient.discovery.Resource",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GooglePlacesTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'google_places'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Google Places. Useful for when you need to validate or discover addressed from ambiguous text. Input should be a search query.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.google_places.tool.GooglePlacesSchema'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.google_places_api.GooglePlacesAPIWrapper",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GoogleSearchResults",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'Google Search Results JSON'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Google Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON array of the query results'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "num_results",
                            "type": "int",
                            "value": "4"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.google_search.GoogleSearchAPIWrapper",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GoogleSearchRun",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'google_search'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Google Search. Useful for when you need to answer questions about current events. Input should be a search query.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.google_search.GoogleSearchAPIWrapper",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GoogleSerperResults",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'Google Serrper Results JSON'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A low-cost Google Search API.Useful for when you need to answer questions about current events.Input should be a search query. Output is a JSON object of the query results'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.google_serper.GoogleSerperAPIWrapper",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GoogleSerperRun",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'google_serper'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A low-cost Google Search API.Useful for when you need to answer questions about current events.Input should be a search query.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.google_serper.GoogleSerperAPIWrapper",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HumanInputRun",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'human'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'You can ask a human for guidance when you think you got stuck or you are not sure what to do next. The input should be a question for the human.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "prompt_func",
                            "type": "Callable[[str], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "input_func",
                            "type": "Callable",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "IFTTTWebhook",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "url",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "InfoPowerBITool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'schema_powerbi'"
                        },
                        {
                            "name": "description",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = '\\n    Input to this tool is a comma-separated list of tables; output is the schema and sample rows for those tables.\\n    Be sure that the tables actually exist by calling list_tables_powerbi first!\\n\\n    Example Input",
                            "type": "\"table1; table2; table3\"\\n    '",
                            "value": ""
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "powerbi",
                            "type": "langchain.utilities.powerbi.PowerBIDataset",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ListDirectoryTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'list_directory'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'List files and directories in a specified folder'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.file_management.list_dir.DirectoryListingInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "root_dir",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ListPowerBITool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'list_tables_powerbi'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Input is an empty string; output is a comma separated list of tables in the database.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "powerbi",
                            "type": "langchain.utilities.powerbi.PowerBIDataset",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MetaphorSearchResults",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'metaphor_search_results_json'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Metaphor Search. Input should be a Metaphor-optimized query. Output is a JSON array of the query results'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.metaphor_search.MetaphorSearchAPIWrapper",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MoveFileTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'move_file'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Move or rename a file from one location to another'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.file_management.move.FileMoveInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "root_dir",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "NavigateBackTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'previous_webpage'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Navigate back to the previous page in the browser history'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'pydantic.main.BaseModel'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "sync_browser",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "NavigateTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'navigate_browser'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Navigate a browser to the specified URL'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.playwright.navigate.NavigateToolInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "sync_browser",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OpenAPISpec",
                    "args": [
                        {
                            "name": "openapi",
                            "type": "str",
                            "value": "'3.1.0'"
                        },
                        {
                            "name": "info",
                            "type": "openapi_schema_pydantic.v3.v3_1_0.info.Info",
                            "value": ""
                        },
                        {
                            "name": "jsonSchemaDialect",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "servers",
                            "type": "List[openapi_schema_pydantic.v3.v3_1_0.server.Server]",
                            "value": "[Server"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OpenWeatherMapQueryRun",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'OpenWeatherMap'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around OpenWeatherMap API. Useful for fetching current weather information for a specified location. Input should be a location string"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "QueryPowerBITool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'query_powerbi'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'\\n    Input to this tool is a detailed question about the dataset; output is a result from the dataset.'"
                        },
                        {
                            "name": "session_cache",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "max_iterations",
                            "type": "int",
                            "value": "5"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ReadFileTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'read_file'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Read file from disk'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.file_management.read.ReadFileInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "root_dir",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SceneXplainTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'image_explainer'"
                        },
                        {
                            "name": "description",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'An Image Captioning Tool",
                            "type": "Use this tool to generate a detailed caption for an image. The input can be an image file of any format; and the output will be a text description that covers every detail of the image.'",
                            "value": ""
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.scenexplain.SceneXplainAPIWrapper",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ShellTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'terminal'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Run shell commands on this Linux machine.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.shell.tool.ShellInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "process",
                            "type": "langchain.utilities.bash.BashProcess",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SteamshipImageGenerationTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'GenerateImage'"
                        },
                        {
                            "name": "description",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'Useful for when you need to generate an image.Input",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "A detailed text-2-image prompt describing an imageOutput",
                            "type": "the UUID of a generated image'",
                            "value": ""
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "model_name",
                            "type": "langchain.tools.steamship_image_generation.tool.ModelName",
                            "value": ""
                        },
                        {
                            "name": "size",
                            "type": "Optional[str]",
                            "value": "'512x512'"
                        },
                        {
                            "name": "steamship",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "StructuredTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": ""
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "func",
                            "type": "Callable[..., Any]",
                            "value": ""
                        },
                        {
                            "name": "coroutine",
                            "type": "Optional[Callable[..., Awaitable[Any]]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Tool",
                    "args": [
                        {
                            "name": "name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "func",
                            "type": "'Callable'",
                            "value": ""
                        },
                        {
                            "name": "description",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "coroutine",
                            "type": "Optional[Callable[..., Awaitable[str]]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "VectorStoreQATool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "vectorstore",
                            "type": "langchain.vectorstores.base.VectorStore",
                            "value": ""
                        },
                        {
                            "name": "llm",
                            "type": "langchain.base_language.BaseLanguageModel",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "VectorStoreQAWithSourcesTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "vectorstore",
                            "type": "langchain.vectorstores.base.VectorStore",
                            "value": ""
                        },
                        {
                            "name": "llm",
                            "type": "langchain.base_language.BaseLanguageModel",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WikipediaQueryRun",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'Wikipedia'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Wikipedia. Useful for when you need to answer general questions about people; etc.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.wikipedia.WikipediaAPIWrapper",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WolframAlphaQueryRun",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'wolfram_alpha'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'A wrapper around Wolfram Alpha. Useful for when you need to answer questions about Math; Science; etc. Input should be a search query.'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.wolfram_alpha.WolframAlphaAPIWrapper",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WriteFileTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'write_file'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'Write file to disk'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Type[pydantic.main.BaseModel]",
                            "value": "<class 'langchain.tools.file_management.write.WriteFileInput'>"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "root_dir",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "YouTubeSearchTool",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'youtube_search'"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "'search for youtube videos associated with a person. the input to this tool should be a comma separated list; the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional'"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ZapierNLAListActions",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "'ZapierNLA_list_actions'"
                        },
                        {
                            "name": "description",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'A wrapper around Zapier NLA actions. The input to this tool is a natural language instruction; for example \"get the latest email from my bank\" or \"send a slack message to the #general channel\". Each tool will have params associated with it that are specified as a list. You MUST take into account the params when creating the instruction. For example; if the params are [\\'Message_Text\\'; \\'Channel\\']; your instruction should be something like \\'send a slack message to the #general channel with the text hello world\\'. Another example",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "if the params are [\\'Calendar\\'; \\'Search_Term\\']; your instruction should be something like \\'find the meeting in my personal calendar at 3pm\\'. Do not make up params; they will be explicitly specified in the tool description. If you do not have enough information to fill in the params; just say \\'not enough information provided in the instruction; missing <param>\\'. If you get a none or null response; STOP EXECUTION; do not try to another tool!This tool specifically used for",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "{zapier_description}; and has params",
                            "type": "{params}This tool returns a list of the user\\'s exposed actions.'",
                            "value": ""
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.zapier.ZapierNLAWrapper",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ZapierNLARunAction",
                    "args": [
                        {
                            "name": "name",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "description",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "args_schema",
                            "type": "Optional[Type[pydantic.main.BaseModel]]",
                            "value": "None"
                        },
                        {
                            "name": "return_direct",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "handle_tool_error",
                            "type": "Union[bool, str, Callable[[langchain.tools.base.ToolException], str], NoneType]",
                            "value": "False"
                        },
                        {
                            "name": "api_wrapper",
                            "type": "langchain.utilities.zapier.ZapierNLAWrapper",
                            "value": "None"
                        },
                        {
                            "name": "action_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "params",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "base_prompt",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'A wrapper around Zapier NLA actions. The input to this tool is a natural language instruction; for example \"get the latest email from my bank\" or \"send a slack message to the #general channel\". Each tool will have params associated with it that are specified as a list. You MUST take into account the params when creating the instruction. For example; if the params are [\\'Message_Text\\'; \\'Channel\\']; your instruction should be something like \\'send a slack message to the #general channel with the text hello world\\'. Another example",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "if the params are [\\'Calendar\\'; \\'Search_Term\\']; your instruction should be something like \\'find the meeting in my personal calendar at 3pm\\'. Do not make up params; they will be explicitly specified in the tool description. If you do not have enough information to fill in the params; just say \\'not enough information provided in the instruction; missing <param>\\'. If you get a none or null response; STOP EXECUTION; do not try to another tool!This tool specifically used for",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "{zapier_description}; and has params",
                            "type": "{params}'",
                            "value": ""
                        },
                        {
                            "name": "zapier_description",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "params_schema",
                            "type": "Dict[str, str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "utils",
            "tag": "UTIL",
            "path": "langchain.utilities",
            "docs": "",
            "options": [
                {
                    "name": "ApifyWrapper",
                    "args": [
                        {
                            "name": "apify_client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "apify_client_async",
                            "type": "Any",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ArxivAPIWrapper",
                    "args": [
                        {
                            "name": "arxiv_search",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "arxiv_exceptions",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "top_k_results",
                            "type": "int",
                            "value": "3"
                        },
                        {
                            "name": "load_max_docs",
                            "type": "int",
                            "value": "100"
                        },
                        {
                            "name": "load_all_available_meta",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "doc_content_chars_max",
                            "type": "Optional[int]",
                            "value": "4000"
                        },
                        {
                            "name": "ARXIV_MAX_QUERY_LENGTH",
                            "type": "int",
                            "value": "300"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BashProcess",
                    "args": [
                        {
                            "name": "strip_newlines",
                            "type": "'bool'",
                            "value": "False"
                        },
                        {
                            "name": "return_err_output",
                            "type": "'bool'",
                            "value": "False"
                        },
                        {
                            "name": "persistent",
                            "type": "'bool'",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BingSearchAPIWrapper",
                    "args": [
                        {
                            "name": "bing_subscription_key",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "bing_search_url",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "10"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DuckDuckGoSearchAPIWrapper",
                    "args": [
                        {
                            "name": "k",
                            "type": "int",
                            "value": "10"
                        },
                        {
                            "name": "region",
                            "type": "Optional[str]",
                            "value": "'wt-wt'"
                        },
                        {
                            "name": "safesearch",
                            "type": "str",
                            "value": "'moderate'"
                        },
                        {
                            "name": "time",
                            "type": "Optional[str]",
                            "value": "'y'"
                        },
                        {
                            "name": "max_results",
                            "type": "int",
                            "value": "5"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GooglePlacesAPIWrapper",
                    "args": [
                        {
                            "name": "gplaces_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "google_map_client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "top_k_results",
                            "type": "Optional[int]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GoogleSearchAPIWrapper",
                    "args": [
                        {
                            "name": "search_engine",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "google_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "google_cse_id",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "10"
                        },
                        {
                            "name": "siterestrict",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GoogleSerperAPIWrapper",
                    "args": [
                        {
                            "name": "k",
                            "type": "int",
                            "value": "10"
                        },
                        {
                            "name": "gl",
                            "type": "str",
                            "value": "'us'"
                        },
                        {
                            "name": "hl",
                            "type": "str",
                            "value": "'en'"
                        },
                        {
                            "name": "type",
                            "type": "Literal['news', 'search', 'places', 'images']",
                            "value": "'search'"
                        },
                        {
                            "name": "tbs",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "serper_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "aiosession",
                            "type": "Optional[aiohttp.client.ClientSession]",
                            "value": "None"
                        },
                        {
                            "name": "result_key_for_type",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "dict = {'news'",
                            "type": "'news'",
                            "value": ""
                        },
                        {
                            "name": "'places'",
                            "type": "'places'",
                            "value": ""
                        },
                        {
                            "name": "'images'",
                            "type": "'images'",
                            "value": ""
                        },
                        {
                            "name": "'search'",
                            "type": "'organic'}",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GraphQLAPIWrapper",
                    "args": [
                        {
                            "name": "custom_headers",
                            "type": "Optional[Dict[str, str]]",
                            "value": "None"
                        },
                        {
                            "name": "graphql_endpoint",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "gql_client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "gql_function",
                            "type": "Callable[[str], Any]",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "LambdaWrapper",
                    "args": [
                        {
                            "name": "lambda_client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "function_name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "awslambda_tool_name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "awslambda_tool_description",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MetaphorSearchAPIWrapper",
                    "args": [
                        {
                            "name": "metaphor_api_key",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "10"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OpenWeatherMapAPIWrapper",
                    "args": [
                        {
                            "name": "owm",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "openweathermap_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PowerBIDataset",
                    "args": [
                        {
                            "name": "dataset_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "table_names",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "group_id",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "credential",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PythonREPL",
                    "args": [
                        {
                            "name": "_globals",
                            "type": "Optional[Dict]",
                            "value": "None"
                        },
                        {
                            "name": "_locals",
                            "type": "Optional[Dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SearxSearchWrapper",
                    "args": [
                        {
                            "name": "searx_host",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "unsecure",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "params",
                            "type": "dict",
                            "value": "None"
                        },
                        {
                            "name": "headers",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "engines",
                            "type": "Optional[List[str]]",
                            "value": "[]"
                        },
                        {
                            "name": "categories",
                            "type": "Optional[List[str]]",
                            "value": "[]"
                        },
                        {
                            "name": "query_suffix",
                            "type": "Optional[str]",
                            "value": "''"
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "10"
                        },
                        {
                            "name": "aiosession",
                            "type": "Optional[Any]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SerpAPIWrapper",
                    "args": [
                        {
                            "name": "search_engine",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "params",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "dict = {'engine'",
                            "type": "'google'",
                            "value": ""
                        },
                        {
                            "name": "'google_domain'",
                            "type": "'google.com'",
                            "value": ""
                        },
                        {
                            "name": "'gl'",
                            "type": "'us'",
                            "value": ""
                        },
                        {
                            "name": "'hl'",
                            "type": "'en'}",
                            "value": ""
                        },
                        {
                            "name": "serpapi_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "aiosession",
                            "type": "Optional[aiohttp.client.ClientSession]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SparkSQL",
                    "args": [
                        {
                            "name": "spark_session",
                            "type": "'Optional[SparkSession]'",
                            "value": "None"
                        },
                        {
                            "name": "catalog",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "schema",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "ignore_tables",
                            "type": "'Optional[List[str]]'",
                            "value": "None"
                        },
                        {
                            "name": "include_tables",
                            "type": "'Optional[List[str]]'",
                            "value": "None"
                        },
                        {
                            "name": "sample_rows_in_table_info",
                            "type": "'int'",
                            "value": "3"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TextRequestsWrapper",
                    "args": [
                        {
                            "name": "headers",
                            "type": "Optional[Dict[str, str]]",
                            "value": "None"
                        },
                        {
                            "name": "aiosession",
                            "type": "Optional[aiohttp.client.ClientSession]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TwilioAPIWrapper",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "account_sid",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "auth_token",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "from_number",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WikipediaAPIWrapper",
                    "args": [
                        {
                            "name": "wiki_client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "top_k_results",
                            "type": "int",
                            "value": "3"
                        },
                        {
                            "name": "lang",
                            "type": "str",
                            "value": "'en'"
                        },
                        {
                            "name": "load_all_available_meta",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "doc_content_chars_max",
                            "type": "int",
                            "value": "4000"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WolframAlphaAPIWrapper",
                    "args": [
                        {
                            "name": "wolfram_client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "wolfram_alpha_appid",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "chat_models",
            "tag": "CHAT-MODEL",
            "path": "langchain.chat_models",
            "docs": "/modules/models/chat/integrations.html",
            "options": [
                {
                    "name": "AzureChatOpenAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'gpt-3.5-turbo'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "openai_api_base",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "openai_organization",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "openai_proxy",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "request_timeout",
                            "type": "Union[float, Tuple[float, float], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "max_retries",
                            "type": "int",
                            "value": "6"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "max_tokens",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "deployment_name",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "openai_api_type",
                            "type": "str",
                            "value": "'azure'"
                        },
                        {
                            "name": "openai_api_version",
                            "type": "str",
                            "value": "''"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ChatAnthropic",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'claude-v1'"
                        },
                        {
                            "name": "max_tokens_to_sample",
                            "type": "int",
                            "value": "256"
                        },
                        {
                            "name": "temperature",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "top_k",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "top_p",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "default_request_timeout",
                            "type": "Union[float, Tuple[float, float], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "anthropic_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "HUMAN_PROMPT",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "AI_PROMPT",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "count_tokens",
                            "type": "Optional[Callable[[str], int]]",
                            "value": "None"
                        },
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ChatGooglePalm",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "'models/chat-bison-001'"
                        },
                        {
                            "name": "google_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "temperature",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "top_p",
                            "type": "Optional[float]",
                            "value": "None"
                        },
                        {
                            "name": "top_k",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ChatOpenAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'gpt-3.5-turbo'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_base",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_organization",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_proxy",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "request_timeout",
                            "type": "Union[float, Tuple[float, float], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "max_retries",
                            "type": "int",
                            "value": "6"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "max_tokens",
                            "type": "Optional[int]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ChatVertexAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PromptLayerChatOpenAI",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'gpt-3.5-turbo'"
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "value": "0.7"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_base",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_organization",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_proxy",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "request_timeout",
                            "type": "Union[float, Tuple[float, float], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "max_retries",
                            "type": "int",
                            "value": "6"
                        },
                        {
                            "name": "streaming",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "value": "1"
                        },
                        {
                            "name": "max_tokens",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "pl_tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "return_pl_id",
                            "type": "Optional[bool]",
                            "value": "False"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "chat_messages",
            "tag": "CHAT-MESSAGE",
            "path": "langchain.schema",
            "docs": "",
            "options": [
                {
                    "name": "AIMessage",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "content",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "additional_kwargs",
                            "type": "dict",
                            "value": "None"
                        },
                        {
                            "name": "example",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HumanMessage",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "content",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "additional_kwargs",
                            "type": "dict",
                            "value": "None"
                        },
                        {
                            "name": "example",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SystemMessage",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "content",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "additional_kwargs",
                            "type": "dict",
                            "value": "None"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "loaders",
            "tag": "LOADER",
            "path": "langchain.document_loaders",
            "docs": "/modules/indexes/document_loaders.html",
            "options": [
                {
                    "name": "AZLyricsLoader",
                    "args": [
                        {
                            "name": "web_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "header_template",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AirbyteJSONLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ApifyDatasetLoader",
                    "args": [
                        {
                            "name": "dataset_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "dataset_mapping_function",
                            "type": "Callable[[Dict], langchain.schema.Document]",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ArxivLoader",
                    "args": [
                        {
                            "name": "query",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "load_max_docs",
                            "type": "Optional[int]",
                            "value": "100"
                        },
                        {
                            "name": "load_all_available_meta",
                            "type": "Optional[bool]",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AzureBlobStorageContainerLoader",
                    "args": [
                        {
                            "name": "conn_str",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "container",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "prefix",
                            "type": "str",
                            "value": "''"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AzureBlobStorageFileLoader",
                    "args": [
                        {
                            "name": "conn_str",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "container",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "blob_name",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BSHTMLLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "open_encoding",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "bs_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "get_text_separator",
                            "type": "str",
                            "value": "''"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BibtexLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "parser",
                            "type": "Optional[langchain.utilities.bibtex.BibtexparserWrapper]",
                            "value": "None"
                        },
                        {
                            "name": "max_docs",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "max_content_chars",
                            "type": "Optional[int]",
                            "value": "4000"
                        },
                        {
                            "name": "load_extra_metadata",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "file_pattern",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = '[^",
                            "type": "]+\\\\.pdf'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BigQueryLoader",
                    "args": [
                        {
                            "name": "query",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "project",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "page_content_columns",
                            "type": "'Optional[List[str]]'",
                            "value": "None"
                        },
                        {
                            "name": "metadata_columns",
                            "type": "'Optional[List[str]]'",
                            "value": "None"
                        },
                        {
                            "name": "credentials",
                            "type": "'Optional[Credentials]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BiliBiliLoader",
                    "args": [
                        {
                            "name": "video_urls",
                            "type": "List[str]",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BlackboardLoader",
                    "args": [
                        {
                            "name": "blackboard_course_url",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "bbrouter",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "load_all_recursively",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "basic_auth",
                            "type": "Optional[Tuple[str, str]]",
                            "value": "None"
                        },
                        {
                            "name": "cookies",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BlockchainDocumentLoader",
                    "args": [
                        {
                            "name": "contract_address",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "blockchainType",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "langchain.document_loaders.blockchain.BlockchainType = <BlockchainType.ETH_MAINNET",
                            "type": "'eth-mainnet'>",
                            "value": ""
                        },
                        {
                            "name": "api_key",
                            "type": "str",
                            "value": "'docs-demo'"
                        },
                        {
                            "name": "startToken",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "get_all_tokens",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "max_execution_time",
                            "type": "Optional[int]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "CSVLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "source_column",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "csv_args",
                            "type": "Optional[Dict]",
                            "value": "None"
                        },
                        {
                            "name": "encoding",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ChatGPTLoader",
                    "args": [
                        {
                            "name": "log_file",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "num_logs",
                            "type": "int",
                            "value": "-1"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "CoNLLULoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "CollegeConfidentialLoader",
                    "args": [
                        {
                            "name": "web_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "header_template",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConfluenceLoader",
                    "args": [
                        {
                            "name": "url",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "username",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "oauth2",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "token",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "cloud",
                            "type": "Optional[bool]",
                            "value": "True"
                        },
                        {
                            "name": "number_of_retries",
                            "type": "Optional[int]",
                            "value": "3"
                        },
                        {
                            "name": "min_retry_seconds",
                            "type": "Optional[int]",
                            "value": "2"
                        },
                        {
                            "name": "max_retry_seconds",
                            "type": "Optional[int]",
                            "value": "10"
                        },
                        {
                            "name": "confluence_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DataFrameLoader",
                    "args": [
                        {
                            "name": "data_frame",
                            "type": "Any",
                            "value": ""
                        },
                        {
                            "name": "page_content_column",
                            "type": "str",
                            "value": "'text'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DiffbotLoader",
                    "args": [
                        {
                            "name": "api_token",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "urls",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "continue_on_failure",
                            "type": "bool",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DirectoryLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "glob",
                            "type": "str",
                            "value": "'**/[!.]*'"
                        },
                        {
                            "name": "silent_errors",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "load_hidden",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "loader_cls",
                            "type": "Union[Type[langchain.document_loaders.unstructured.UnstructuredFileLoader], Type[langchain.document_loaders.text.TextLoader], Type[langchain.document_loaders.html_bs.BSHTMLLoader]]",
                            "value": "<class 'langchain.document_loaders.unstructured.UnstructuredFileLoader'>"
                        },
                        {
                            "name": "loader_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "recursive",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "show_progress",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "use_multithreading",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "max_concurrency",
                            "type": "int",
                            "value": "4"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DiscordChatLoader",
                    "args": [
                        {
                            "name": "chat_log",
                            "type": "'pd.DataFrame'",
                            "value": ""
                        },
                        {
                            "name": "user_id_col",
                            "type": "'str'",
                            "value": "'ID'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DocugamiLoader",
                    "args": [
                        {
                            "name": "api",
                            "type": "str",
                            "value": "'https://api.docugami.com/v1preview1'"
                        },
                        {
                            "name": "access_token",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "docset_id",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "document_ids",
                            "type": "Optional[Sequence[str]]",
                            "value": "None"
                        },
                        {
                            "name": "file_paths",
                            "type": "Optional[Sequence[Union[pathlib.Path, str]]]",
                            "value": "None"
                        },
                        {
                            "name": "min_chunk_size",
                            "type": "int",
                            "value": "32"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Docx2txtLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DuckDBLoader",
                    "args": [
                        {
                            "name": "query",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "database",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = '",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "memory",
                            "type": "'",
                            "value": ""
                        },
                        {
                            "name": "read_only",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "config",
                            "type": "Optional[Dict[str, str]]",
                            "value": "None"
                        },
                        {
                            "name": "page_content_columns",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "metadata_columns",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "EverNoteLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "load_single_document",
                            "type": "bool",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "FacebookChatLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GCSDirectoryLoader",
                    "args": [
                        {
                            "name": "project_name",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "bucket",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "prefix",
                            "type": "str",
                            "value": "''"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GCSFileLoader",
                    "args": [
                        {
                            "name": "project_name",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "bucket",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "blob",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GitHubIssuesLoader",
                    "args": [
                        {
                            "name": "repo",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "access_token",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "include_prs",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "milestone",
                            "type": "Union[int, Literal['*', 'none'], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "state",
                            "type": "Optional[Literal['open', 'closed', 'all']]",
                            "value": "None"
                        },
                        {
                            "name": "assignee",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "creator",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "mentioned",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "labels",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "sort",
                            "type": "Optional[Literal['created', 'updated', 'comments']]",
                            "value": "None"
                        },
                        {
                            "name": "direction",
                            "type": "Optional[Literal['asc', 'desc']]",
                            "value": "None"
                        },
                        {
                            "name": "since",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GitLoader",
                    "args": [
                        {
                            "name": "repo_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "clone_url",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "branch",
                            "type": "Optional[str]",
                            "value": "'main'"
                        },
                        {
                            "name": "file_filter",
                            "type": "Optional[Callable[[str], bool]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GitbookLoader",
                    "args": [
                        {
                            "name": "web_page",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "load_all_paths",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "base_url",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "content_selector",
                            "type": "str",
                            "value": "'main'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GoogleApiClient",
                    "args": [
                        {
                            "name": "credentials_path",
                            "type": "'Path'",
                            "value": "PosixPath"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GoogleApiYoutubeLoader",
                    "args": [
                        {
                            "name": "google_api_client",
                            "type": "'GoogleApiClient'",
                            "value": ""
                        },
                        {
                            "name": "channel_name",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "video_ids",
                            "type": "'Optional[List[str]]'",
                            "value": "None"
                        },
                        {
                            "name": "add_video_info",
                            "type": "'bool'",
                            "value": "True"
                        },
                        {
                            "name": "captions_language",
                            "type": "'str'",
                            "value": "'en'"
                        },
                        {
                            "name": "continue_on_failure",
                            "type": "'bool'",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GoogleDriveLoader",
                    "args": [
                        {
                            "name": "service_account_key",
                            "type": "pathlib.Path",
                            "value": "PosixPath"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GutenbergLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HNLoader",
                    "args": [
                        {
                            "name": "web_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "header_template",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HuggingFaceDatasetLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "page_content_column",
                            "type": "str",
                            "value": "'text'"
                        },
                        {
                            "name": "name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "data_dir",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "data_files",
                            "type": "Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]], NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "cache_dir",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "keep_in_memory",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "save_infos",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "use_auth_token",
                            "type": "Union[bool, str, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "num_proc",
                            "type": "Optional[int]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "IFixitLoader",
                    "args": [
                        {
                            "name": "web_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "IMSDbLoader",
                    "args": [
                        {
                            "name": "web_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "header_template",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ImageCaptionLoader",
                    "args": [
                        {
                            "name": "path_images",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "blip_processor",
                            "type": "str",
                            "value": "'Salesforce/blip-image-captioning-base'"
                        },
                        {
                            "name": "blip_model",
                            "type": "str",
                            "value": "'Salesforce/blip-image-captioning-base'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "JSONLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, pathlib.Path]",
                            "value": ""
                        },
                        {
                            "name": "jq_schema",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "content_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "metadata_func",
                            "type": "Optional[Callable[[Dict, Dict], Dict]]",
                            "value": "None"
                        },
                        {
                            "name": "text_content",
                            "type": "bool",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "JoplinLoader",
                    "args": [
                        {
                            "name": "access_token",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "port",
                            "type": "int",
                            "value": "41184"
                        },
                        {
                            "name": "host",
                            "type": "str",
                            "value": "'localhost'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MWDumpLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "encoding",
                            "type": "Optional[str]",
                            "value": "'utf8'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MastodonTootsLoader",
                    "args": [
                        {
                            "name": "mastodon_accounts",
                            "type": "'Sequence[str]'",
                            "value": ""
                        },
                        {
                            "name": "number_toots",
                            "type": "'Optional[int]'",
                            "value": "100"
                        },
                        {
                            "name": "exclude_replies",
                            "type": "'bool'",
                            "value": "False"
                        },
                        {
                            "name": "access_token",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "api_base_url",
                            "type": "'str'",
                            "value": "'https://mastodon.social'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MathpixPDFLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "processed_file_format",
                            "type": "str",
                            "value": "'mmd'"
                        },
                        {
                            "name": "max_wait_time_seconds",
                            "type": "int",
                            "value": "500"
                        },
                        {
                            "name": "should_clean_pdf",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "**kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MaxComputeLoader",
                    "args": [
                        {
                            "name": "query",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "api_wrapper",
                            "type": "'MaxComputeAPIWrapper'",
                            "value": ""
                        },
                        {
                            "name": "page_content_columns",
                            "type": "'Optional[Sequence[str]]'",
                            "value": "None"
                        },
                        {
                            "name": "metadata_columns",
                            "type": "'Optional[Sequence[str]]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ModernTreasuryLoader",
                    "args": [
                        {
                            "name": "resource",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "organization_id",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "NotebookLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "include_outputs",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "max_output_length",
                            "type": "int",
                            "value": "10"
                        },
                        {
                            "name": "remove_newline",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "traceback",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "NotionDBLoader",
                    "args": [
                        {
                            "name": "integration_token",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "database_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "request_timeout_sec",
                            "type": "Optional[int]",
                            "value": "10"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "NotionDirectoryLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ObsidianLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "encoding",
                            "type": "str",
                            "value": "'UTF-8'"
                        },
                        {
                            "name": "collect_metadata",
                            "type": "bool",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OneDriveLoader",
                    "args": [
                        {
                            "name": "settings",
                            "type": "langchain.document_loaders.onedrive._OneDriveSettings",
                            "value": "None"
                        },
                        {
                            "name": "drive_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "folder_path",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "object_ids",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "auth_with_token",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OnlinePDFLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OutlookMessageLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PDFMinerLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PDFMinerPDFasHTMLLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PDFPlumberLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "text_kwargs",
                            "type": "Optional[Mapping[str, Any]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PagedPDFSplitter",
                    "args": [],
                    "templates": []
                },
                {
                    "name": "PlaywrightURLLoader",
                    "args": [
                        {
                            "name": "urls",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "continue_on_failure",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "headless",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "remove_selectors",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PsychicLoader",
                    "args": [
                        {
                            "name": "api_key",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "connector_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "connection_id",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PyMuPDFLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PyPDFDirectoryLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "glob",
                            "type": "str",
                            "value": "'**/[!.]*.pdf'"
                        },
                        {
                            "name": "silent_errors",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "load_hidden",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "recursive",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PyPDFLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "!pip install pypdf",
                            "imports": "from langchain.document_loaders import PyPDFLoader",
                            "template": "\nloader = PyPDFLoader(\"{file_path}\")\ndocuments = loader.load_and_split()\n                        "
                        }
                    ]
                },
                {
                    "name": "PyPDFium2Loader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PySparkDataFrameLoader",
                    "args": [
                        {
                            "name": "spark_session",
                            "type": "Optional[ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PythonLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ReadTheDocsLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "Union[str, pathlib.Path]",
                            "value": ""
                        },
                        {
                            "name": "encoding",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "errors",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "custom_html_tag",
                            "type": "Optional[Tuple[str, dict]]",
                            "value": "None"
                        },
                        {
                            "name": "**kwargs",
                            "type": "Optional[Any]",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "RedditPostsLoader",
                    "args": [
                        {
                            "name": "client_id",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "client_secret",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "user_agent",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "search_queries",
                            "type": "'Sequence[str]'",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "categories",
                            "type": "'Sequence[str]'",
                            "value": "['new']"
                        },
                        {
                            "name": "number_posts",
                            "type": "'Optional[int]'",
                            "value": "10"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "RoamLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "S3DirectoryLoader",
                    "args": [
                        {
                            "name": "bucket",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "prefix",
                            "type": "str",
                            "value": "''"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "S3FileLoader",
                    "args": [
                        {
                            "name": "bucket",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "key",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SRTLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SeleniumURLLoader",
                    "args": [
                        {
                            "name": "urls",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "continue_on_failure",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "browser",
                            "type": "Literal['chrome', 'firefox']",
                            "value": "'chrome'"
                        },
                        {
                            "name": "binary_location",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "executable_path",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "headless",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "arguments",
                            "type": "List[str]",
                            "value": "[]"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SitemapLoader",
                    "args": [
                        {
                            "name": "web_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "filter_urls",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "parsing_function",
                            "type": "Optional[Callable]",
                            "value": "None"
                        },
                        {
                            "name": "blocksize",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "blocknum",
                            "type": "int",
                            "value": "0"
                        },
                        {
                            "name": "meta_function",
                            "type": "Optional[Callable]",
                            "value": "None"
                        },
                        {
                            "name": "is_local",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SlackDirectoryLoader",
                    "args": [
                        {
                            "name": "zip_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "workspace_url",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SpreedlyLoader",
                    "args": [
                        {
                            "name": "access_token",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "resource",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "StripeLoader",
                    "args": [
                        {
                            "name": "resource",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "access_token",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TelegramChatApiLoader",
                    "args": [
                        {
                            "name": "chat_entity",
                            "type": "'Optional[EntityLike]'",
                            "value": "None"
                        },
                        {
                            "name": "api_id",
                            "type": "'Optional[int]'",
                            "value": "None"
                        },
                        {
                            "name": "api_hash",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "username",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "file_path",
                            "type": "'str'",
                            "value": "'telegram_data.json'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TelegramChatFileLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "'str'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TelegramChatLoader",
                    "args": [],
                    "templates": []
                },
                {
                    "name": "TextLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "encoding",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "autodetect_encoding",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "",
                            "imports": "from langchain.document_loaders import TextLoader",
                            "template": "\nloader = TextLoader('{file_path}')\n        "
                        }
                    ]
                },
                {
                    "name": "ToMarkdownLoader",
                    "args": [
                        {
                            "name": "url",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "api_key",
                            "type": "'str'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TomlLoader",
                    "args": [
                        {
                            "name": "source",
                            "type": "Union[str, pathlib.Path]",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TrelloLoader",
                    "args": [
                        {
                            "name": "client",
                            "type": "'TrelloClient'",
                            "value": ""
                        },
                        {
                            "name": "board_name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "include_card_name",
                            "type": "'bool'",
                            "value": "True"
                        },
                        {
                            "name": "include_comments",
                            "type": "'bool'",
                            "value": "True"
                        },
                        {
                            "name": "include_checklist",
                            "type": "'bool'",
                            "value": "True"
                        },
                        {
                            "name": "card_filter",
                            "type": "\"Literal['closed', 'open', 'all']\"",
                            "value": "'all'"
                        },
                        {
                            "name": "extra_metadata",
                            "type": "'Tuple[str, ...]'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TwitterTweetLoader",
                    "args": [
                        {
                            "name": "auth_handler",
                            "type": "'Union[OAuthHandler, OAuth2BearerHandler]'",
                            "value": ""
                        },
                        {
                            "name": "twitter_users",
                            "type": "'Sequence[str]'",
                            "value": ""
                        },
                        {
                            "name": "number_tweets",
                            "type": "'Optional[int]'",
                            "value": "100"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredAPIFileIOLoader",
                    "args": [
                        {
                            "name": "file",
                            "type": "Union[IO, Sequence[IO]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "url",
                            "type": "str",
                            "value": "'https://api.unstructured.io/general/v0/general'"
                        },
                        {
                            "name": "api_key",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredAPIFileLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, List[str]]",
                            "value": "''"
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "url",
                            "type": "str",
                            "value": "'https://api.unstructured.io/general/v0/general'"
                        },
                        {
                            "name": "api_key",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredEPubLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredEmailLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredFileIOLoader",
                    "args": [
                        {
                            "name": "file",
                            "type": "Union[IO, Sequence[IO]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredFileLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredHTMLLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredImageLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredMarkdownLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredODTLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredPDFLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredPowerPointLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredRTFLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredURLLoader",
                    "args": [
                        {
                            "name": "urls",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "continue_on_failure",
                            "type": "bool",
                            "value": "True"
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "UnstructuredWordDocumentLoader",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "mode",
                            "type": "str",
                            "value": "'single'"
                        },
                        {
                            "name": "**unstructured_kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WeatherDataLoader",
                    "args": [
                        {
                            "name": "client",
                            "type": "'OpenWeatherMapAPIWrapper'",
                            "value": ""
                        },
                        {
                            "name": "places",
                            "type": "'Sequence[str]'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WebBaseLoader",
                    "args": [
                        {
                            "name": "web_path",
                            "type": "Union[str, List[str]]",
                            "value": ""
                        },
                        {
                            "name": "header_template",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WhatsAppChatLoader",
                    "args": [
                        {
                            "name": "path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WikipediaLoader",
                    "args": [
                        {
                            "name": "query",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "lang",
                            "type": "str",
                            "value": "'en'"
                        },
                        {
                            "name": "load_max_docs",
                            "type": "Optional[int]",
                            "value": "100"
                        },
                        {
                            "name": "load_all_available_meta",
                            "type": "Optional[bool]",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "YoutubeLoader",
                    "args": [
                        {
                            "name": "video_id",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "add_video_info",
                            "type": "'bool'",
                            "value": "False"
                        },
                        {
                            "name": "language",
                            "type": "'Union[str, Sequence[str]]'",
                            "value": "'en'"
                        },
                        {
                            "name": "translation",
                            "type": "'str'",
                            "value": "'en'"
                        },
                        {
                            "name": "continue_on_failure",
                            "type": "'bool'",
                            "value": "False"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "vectorstores",
            "tag": "STORE",
            "path": "langchain.vectorstores",
            "docs": "/modules/indexes/vectorstores.html",
            "options": [
                {
                    "name": "AnalyticDB",
                    "args": [
                        {
                            "name": "connection_string",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "embedding_function",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "collection_name",
                            "type": "'str'",
                            "value": "'langchain'"
                        },
                        {
                            "name": "collection_metadata",
                            "type": "'Optional[dict]'",
                            "value": "None"
                        },
                        {
                            "name": "pre_delete_collection",
                            "type": "'bool'",
                            "value": "False"
                        },
                        {
                            "name": "logger",
                            "type": "'Optional[logging.Logger]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Annoy",
                    "args": [
                        {
                            "name": "embedding_function",
                            "type": "'Callable'",
                            "value": ""
                        },
                        {
                            "name": "index",
                            "type": "'Any'",
                            "value": ""
                        },
                        {
                            "name": "metric",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "docstore",
                            "type": "'Docstore'",
                            "value": ""
                        },
                        {
                            "name": "index_to_docstore_id",
                            "type": "'Dict[int, str]'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AtlasDB",
                    "args": [
                        {
                            "name": "name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "embedding_function",
                            "type": "'Optional[Embeddings]'",
                            "value": "None"
                        },
                        {
                            "name": "api_key",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "description",
                            "type": "'str'",
                            "value": "'A description for your project'"
                        },
                        {
                            "name": "is_public",
                            "type": "'bool'",
                            "value": "True"
                        },
                        {
                            "name": "reset_project_if_exists",
                            "type": "'bool'",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Chroma",
                    "args": [
                        {
                            "name": "collection_name",
                            "type": "'str'",
                            "value": "'langchain'"
                        },
                        {
                            "name": "embedding_function",
                            "type": "'Optional[Embeddings]'",
                            "value": "None"
                        },
                        {
                            "name": "persist_directory",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "client_settings",
                            "type": "'Optional[chromadb.config.Settings]'",
                            "value": "None"
                        },
                        {
                            "name": "collection_metadata",
                            "type": "'Optional[Dict]'",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "'Optional[chromadb.Client]'",
                            "value": "None"
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "!pip install chromadb",
                            "imports": "from langchain.vectorstores import Chroma",
                            "template": "\ndb = Chroma.from_documents(docs, embeddings)\nres = db.similarity_search(\"{prompt}\")\n                        "
                        }
                    ]
                },
                {
                    "name": "DeepLake",
                    "args": [
                        {
                            "name": "dataset_path",
                            "type": "'str'",
                            "value": "'./deeplake/'"
                        },
                        {
                            "name": "token",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "embedding_function",
                            "type": "'Optional[Embeddings]'",
                            "value": "None"
                        },
                        {
                            "name": "read_only",
                            "type": "'Optional[bool]'",
                            "value": "False"
                        },
                        {
                            "name": "ingestion_batch_size",
                            "type": "'int'",
                            "value": "1024"
                        },
                        {
                            "name": "num_workers",
                            "type": "'int'",
                            "value": "0"
                        },
                        {
                            "name": "verbose",
                            "type": "'bool'",
                            "value": "True"
                        },
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DocArrayHnswSearch",
                    "args": [
                        {
                            "name": "doc_index",
                            "type": "'BaseDocIndex'",
                            "value": ""
                        },
                        {
                            "name": "embedding",
                            "type": "langchain.embeddings.base.Embeddings",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DocArrayInMemorySearch",
                    "args": [
                        {
                            "name": "doc_index",
                            "type": "'BaseDocIndex'",
                            "value": ""
                        },
                        {
                            "name": "embedding",
                            "type": "langchain.embeddings.base.Embeddings",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ElasticVectorSearch",
                    "args": [
                        {
                            "name": "elasticsearch_url",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "index_name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "embedding",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "ssl_verify",
                            "type": "'Optional[Dict[str, Any]]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "FAISS",
                    "args": [
                        {
                            "name": "embedding_function",
                            "type": "'Callable'",
                            "value": ""
                        },
                        {
                            "name": "index",
                            "type": "'Any'",
                            "value": ""
                        },
                        {
                            "name": "docstore",
                            "type": "'Docstore'",
                            "value": ""
                        },
                        {
                            "name": "index_to_docstore_id",
                            "type": "'Dict[int, str]'",
                            "value": ""
                        },
                        {
                            "name": "relevance_score_fn",
                            "type": "'Optional[Callable[[float], float]]'",
                            "value": "<function _default_relevance_score_fn at 0x7ffa9e76a440>"
                        },
                        {
                            "name": "normalize_L2",
                            "type": "'bool'",
                            "value": "False"
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "!pip install faiss",
                            "imports": "from langchain.vectorstores import FAISS",
                            "template": "\ndb = FAISS.from_documents(docs, embeddings)\nretriever = db.as_retriever()\ndocs = retriever.get_relevant_documents(\"{prompt}\")\n            "
                        }
                    ]
                },
                {
                    "name": "LanceDB",
                    "args": [
                        {
                            "name": "connection",
                            "type": "'Any'",
                            "value": ""
                        },
                        {
                            "name": "embedding",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "vector_key",
                            "type": "'Optional[str]'",
                            "value": "'vector'"
                        },
                        {
                            "name": "id_key",
                            "type": "'Optional[str]'",
                            "value": "'id'"
                        },
                        {
                            "name": "text_key",
                            "type": "'Optional[str]'",
                            "value": "'text'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Milvus",
                    "args": [
                        {
                            "name": "embedding_function",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "collection_name",
                            "type": "'str'",
                            "value": "'LangChainCollection'"
                        },
                        {
                            "name": "connection_args",
                            "type": "'Optional[dict[str, Any]]'",
                            "value": "None"
                        },
                        {
                            "name": "consistency_level",
                            "type": "'str'",
                            "value": "'Session'"
                        },
                        {
                            "name": "index_params",
                            "type": "'Optional[dict]'",
                            "value": "None"
                        },
                        {
                            "name": "search_params",
                            "type": "'Optional[dict]'",
                            "value": "None"
                        },
                        {
                            "name": "drop_old",
                            "type": "'Optional[bool]'",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MongoDBAtlasVectorSearch",
                    "args": [
                        {
                            "name": "collection",
                            "type": "'Collection[MongoDBDocumentType]'",
                            "value": ""
                        },
                        {
                            "name": "embedding",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "index_name",
                            "type": "'str'",
                            "value": "'default'"
                        },
                        {
                            "name": "text_key",
                            "type": "'str'",
                            "value": "'text'"
                        },
                        {
                            "name": "embedding_key",
                            "type": "'str'",
                            "value": "'embedding'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MyScale",
                    "args": [
                        {
                            "name": "embedding",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "config",
                            "type": "'Optional[MyScaleSettings]'",
                            "value": "None"
                        },
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MyScaleSettings",
                    "args": [
                        {
                            "name": "_env_file",
                            "type": "Union[str, os.PathLike, List[Union[str, os.PathLike]], Tuple[Union[str, os.PathLike], ...], NoneType]",
                            "value": "'<object object at 0x7f0a5c1895b0>'"
                        },
                        {
                            "name": "_env_file_encoding",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "_env_nested_delimiter",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "_secrets_dir",
                            "type": "Union[str, os.PathLike, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "host",
                            "type": "str",
                            "value": "'localhost'"
                        },
                        {
                            "name": "port",
                            "type": "int",
                            "value": "8443"
                        },
                        {
                            "name": "username",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "password",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "index_type",
                            "type": "str",
                            "value": "'IVFFLAT'"
                        },
                        {
                            "name": "index_param",
                            "type": "Optional[Dict[str, str]]",
                            "value": "None"
                        },
                        {
                            "name": "column_map",
                            "type": "Dict[str",
                            "value": ""
                        },
                        {
                            "name": "str] = {'id'",
                            "type": "'id'",
                            "value": ""
                        },
                        {
                            "name": "'text'",
                            "type": "'text'",
                            "value": ""
                        },
                        {
                            "name": "'vector'",
                            "type": "'vector'",
                            "value": ""
                        },
                        {
                            "name": "'metadata'",
                            "type": "'metadata'}",
                            "value": ""
                        },
                        {
                            "name": "database",
                            "type": "str",
                            "value": "'default'"
                        },
                        {
                            "name": "table",
                            "type": "str",
                            "value": "'langchain'"
                        },
                        {
                            "name": "metric",
                            "type": "str",
                            "value": "'cosine'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OpenSearchVectorSearch",
                    "args": [
                        {
                            "name": "opensearch_url",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "index_name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "embedding_function",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Pinecone",
                    "args": [
                        {
                            "name": "index",
                            "type": "'Any'",
                            "value": ""
                        },
                        {
                            "name": "embedding_function",
                            "type": "'Callable'",
                            "value": ""
                        },
                        {
                            "name": "text_key",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "namespace",
                            "type": "'Optional[str]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Qdrant",
                    "args": [
                        {
                            "name": "client",
                            "type": "'Any'",
                            "value": ""
                        },
                        {
                            "name": "collection_name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "embeddings",
                            "type": "'Optional[Embeddings]'",
                            "value": "None"
                        },
                        {
                            "name": "content_payload_key",
                            "type": "'str'",
                            "value": "'page_content'"
                        },
                        {
                            "name": "metadata_payload_key",
                            "type": "'str'",
                            "value": "'metadata'"
                        },
                        {
                            "name": "embedding_function",
                            "type": "'Optional[Callable]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Redis",
                    "args": [
                        {
                            "name": "redis_url",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "index_name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "embedding_function",
                            "type": "'Callable'",
                            "value": ""
                        },
                        {
                            "name": "content_key",
                            "type": "'str'",
                            "value": "'content'"
                        },
                        {
                            "name": "metadata_key",
                            "type": "'str'",
                            "value": "'metadata'"
                        },
                        {
                            "name": "vector_key",
                            "type": "'str'",
                            "value": "'content_vector'"
                        },
                        {
                            "name": "relevance_score_fn",
                            "type": "'Optional[Callable[[float], float]]'",
                            "value": "<function _default_relevance_score at 0x7f141e1c1870>"
                        },
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SKLearnVectorStore",
                    "args": [
                        {
                            "name": "embedding",
                            "type": "langchain.embeddings.base.Embeddings",
                            "value": ""
                        },
                        {
                            "name": "persist_path",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "serializer",
                            "type": "Literal['json', 'bson', 'parquet']",
                            "value": "'json'"
                        },
                        {
                            "name": "metric",
                            "type": "str",
                            "value": "'cosine'"
                        },
                        {
                            "name": "**kwargs",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SupabaseVectorStore",
                    "args": [
                        {
                            "name": "client",
                            "type": "'supabase.client.Client'",
                            "value": ""
                        },
                        {
                            "name": "embedding",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "table_name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "query_name",
                            "type": "'Union[str, None]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Tair",
                    "args": [
                        {
                            "name": "embedding_function",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "url",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "index_name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "content_key",
                            "type": "'str'",
                            "value": "'content'"
                        },
                        {
                            "name": "metadata_key",
                            "type": "'str'",
                            "value": "'metadata'"
                        },
                        {
                            "name": "search_params",
                            "type": "'Optional[dict]'",
                            "value": "None"
                        },
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Typesense",
                    "args": [
                        {
                            "name": "typesense_client",
                            "type": "'Client'",
                            "value": ""
                        },
                        {
                            "name": "embedding",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "typesense_collection_name",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "text_key",
                            "type": "'str'",
                            "value": "'text'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Vectara",
                    "args": [
                        {
                            "name": "vectara_customer_id",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "vectara_corpus_id",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "vectara_api_key",
                            "type": "'Optional[str]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "VectorStore",
                    "args": [],
                    "templates": []
                },
                {
                    "name": "Weaviate",
                    "args": [
                        {
                            "name": "client",
                            "type": "'Any'",
                            "value": ""
                        },
                        {
                            "name": "index_name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "text_key",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "embedding",
                            "type": "'Optional[Embeddings]'",
                            "value": "None"
                        },
                        {
                            "name": "attributes",
                            "type": "'Optional[List[str]]'",
                            "value": "None"
                        },
                        {
                            "name": "relevance_score_fn",
                            "type": "'Optional[Callable[[float], float]]'",
                            "value": "<function _default_score_normalizer at 0x7fafb6deaef0>"
                        },
                        {
                            "name": "by_text",
                            "type": "'bool'",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "Zilliz",
                    "args": [
                        {
                            "name": "embedding_function",
                            "type": "'Embeddings'",
                            "value": ""
                        },
                        {
                            "name": "collection_name",
                            "type": "'str'",
                            "value": "'LangChainCollection'"
                        },
                        {
                            "name": "connection_args",
                            "type": "'Optional[dict[str, Any]]'",
                            "value": "None"
                        },
                        {
                            "name": "consistency_level",
                            "type": "'str'",
                            "value": "'Session'"
                        },
                        {
                            "name": "index_params",
                            "type": "'Optional[dict]'",
                            "value": "None"
                        },
                        {
                            "name": "search_params",
                            "type": "'Optional[dict]'",
                            "value": "None"
                        },
                        {
                            "name": "drop_old",
                            "type": "'Optional[bool]'",
                            "value": "False"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "splitters",
            "tag": "SPLITTER",
            "path": "langchain.text_splitter",
            "docs": "/modules/indexes/text_splitters.html",
            "options": [
                {
                    "name": "CharacterTextSplitter",
                    "args": [
                        {
                            "name": "separator",
                            "type": "'str'",
                            "value": "'\\n\\n'"
                        },
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        },
                        {
                            "name": "chunk_size",
                            "type": "int",
                            "value": "1024"
                        },
                        {
                            "name": "chunk_overlap",
                            "type": "int",
                            "value": "64"
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "",
                            "imports": "from langchain.text_splitter import CharacterTextSplitter",
                            "template": "\ntext_splitter = CharacterTextSplitter(chunk_size={chunk_size}, chunk_overlap={chunk_overlap})\ndocs = text_splitter.split_documents(documents)\n            "
                        }
                    ]
                },
                {
                    "name": "LatexTextSplitter",
                    "args": [
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MarkdownTextSplitter",
                    "args": [
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "NLTKTextSplitter",
                    "args": [
                        {
                            "name": "separator",
                            "type": "'str'",
                            "value": "'\\n\\n'"
                        },
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PythonCodeTextSplitter",
                    "args": [
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "RecursiveCharacterTextSplitter",
                    "args": [
                        {
                            "name": "separators",
                            "type": "'Optional[List[str]]'",
                            "value": "None"
                        },
                        {
                            "name": "keep_separator",
                            "type": "'bool'",
                            "value": "True"
                        },
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        },
                        {
                            "name": "chunk_size",
                            "type": "int",
                            "value": "1024"
                        },
                        {
                            "name": "chunk_overlap",
                            "type": "int",
                            "value": "64"
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "",
                            "imports": "from langchain.text_splitter import RecursiveCharacterTextSplitter",
                            "template": "\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size={chunk_size}, chunk_overlap={chunk_overlap})\ndocs = text_splitter.split_documents(documents)\n            "
                        }
                    ]
                },
                {
                    "name": "SpacyTextSplitter",
                    "args": [
                        {
                            "name": "separator",
                            "type": "'str'",
                            "value": "'\\n\\n'"
                        },
                        {
                            "name": "pipeline",
                            "type": "'str'",
                            "value": "'en_core_web_sm'"
                        },
                        {
                            "name": "**kwargs",
                            "type": "'Any'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TextSplitter",
                    "args": [
                        {
                            "name": "chunk_size",
                            "type": "'int'",
                            "value": "4000"
                        },
                        {
                            "name": "chunk_overlap",
                            "type": "'int'",
                            "value": "200"
                        },
                        {
                            "name": "length_function",
                            "type": "'Callable[[str], int]'",
                            "value": "<built-in function len>"
                        },
                        {
                            "name": "keep_separator",
                            "type": "'bool'",
                            "value": "False"
                        },
                        {
                            "name": "add_start_index",
                            "type": "'bool'",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TokenTextSplitter",
                    "args": [
                        {
                            "name": "encoding_name",
                            "type": "'str'",
                            "value": "'gpt2'"
                        },
                        {
                            "name": "model_name",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "allowed_special",
                            "type": "\"Union[Literal['all'], AbstractSet[str]]\"",
                            "value": "set"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "embeddings",
            "tag": "EMBEDDING",
            "path": "langchain.embeddings",
            "docs": "/modules/models/text_embedding.html",
            "options": [
                {
                    "name": "AlephAlphaAsymmetricSemanticEmbedding",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "Optional[str]",
                            "value": "'luminous-base'"
                        },
                        {
                            "name": "hosting",
                            "type": "Optional[str]",
                            "value": "'https://api.aleph-alpha.com'"
                        },
                        {
                            "name": "normalize",
                            "type": "Optional[bool]",
                            "value": "True"
                        },
                        {
                            "name": "compress_to_size",
                            "type": "Optional[int]",
                            "value": "128"
                        },
                        {
                            "name": "contextual_control_threshold",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "control_log_additive",
                            "type": "Optional[bool]",
                            "value": "True"
                        },
                        {
                            "name": "aleph_alpha_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AlephAlphaSymmetricSemanticEmbedding",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "Optional[str]",
                            "value": "'luminous-base'"
                        },
                        {
                            "name": "hosting",
                            "type": "Optional[str]",
                            "value": "'https://api.aleph-alpha.com'"
                        },
                        {
                            "name": "normalize",
                            "type": "Optional[bool]",
                            "value": "True"
                        },
                        {
                            "name": "compress_to_size",
                            "type": "Optional[int]",
                            "value": "128"
                        },
                        {
                            "name": "contextual_control_threshold",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "control_log_additive",
                            "type": "Optional[bool]",
                            "value": "True"
                        },
                        {
                            "name": "aleph_alpha_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "BedrockEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "region_name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "credentials_profile_name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_id",
                            "type": "str",
                            "value": "'amazon.titan-e1t-medium'"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[Dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "CohereEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'embed-english-v2.0'"
                        },
                        {
                            "name": "truncate",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "cohere_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ElasticsearchEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "'MlClient'",
                            "value": ""
                        },
                        {
                            "name": "model_id",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "input_field",
                            "type": "'str'",
                            "value": "'text_field'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "FakeEmbeddings",
                    "args": [
                        {
                            "name": "size",
                            "type": "int",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "GooglePalmEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "google_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "'models/embedding-gecko-001'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HuggingFaceEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "'sentence-transformers/all-mpnet-base-v2'"
                        },
                        {
                            "name": "cache_folder",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "encode_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "",
                            "imports": "from langchain.embeddings import HuggingFaceEmbeddings",
                            "template": "\nembeddings = HuggingFaceEmbeddings(model_name=\"{model_name}\")\n            "
                        }
                    ]
                },
                {
                    "name": "HuggingFaceHubEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "repo_id",
                            "type": "str",
                            "value": "'sentence-transformers/all-mpnet-base-v2'"
                        },
                        {
                            "name": "task",
                            "type": "Optional[str]",
                            "value": "'feature-extraction'"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "huggingfacehub_api_token",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "HuggingFaceInstructEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "str",
                            "value": "'hkunlp/instructor-large'"
                        },
                        {
                            "name": "cache_folder",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "encode_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "embed_instruction",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'Represent the document for retrieval",
                            "type": "'",
                            "value": ""
                        },
                        {
                            "name": "query_instruction",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'Represent the question for retrieving supporting documents",
                            "type": "'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "JinaEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_name",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'ViT-B-32",
                            "type": "openai'",
                            "value": ""
                        },
                        {
                            "name": "jina_auth_token",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "jina_api_url",
                            "type": "str",
                            "value": "'https://api.clip.jina.ai/api/v1/models/'"
                        },
                        {
                            "name": "request_headers",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "LlamaCppEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_path",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "n_ctx",
                            "type": "int",
                            "value": "512"
                        },
                        {
                            "name": "n_parts",
                            "type": "int",
                            "value": "-1"
                        },
                        {
                            "name": "seed",
                            "type": "int",
                            "value": "-1"
                        },
                        {
                            "name": "f16_kv",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "logits_all",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "vocab_only",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "use_mlock",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "n_threads",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "n_batch",
                            "type": "Optional[int]",
                            "value": "8"
                        },
                        {
                            "name": "n_gpu_layers",
                            "type": "Optional[int]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MiniMaxEmbeddings",
                    "args": [
                        {
                            "name": "endpoint_url",
                            "type": "str",
                            "value": "'https://api.minimax.chat/v1/embeddings'"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'embo-01'"
                        },
                        {
                            "name": "embed_type_db",
                            "type": "str",
                            "value": "'db'"
                        },
                        {
                            "name": "embed_type_query",
                            "type": "str",
                            "value": "'query'"
                        },
                        {
                            "name": "minimax_group_id",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "minimax_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ModelScopeEmbeddings",
                    "args": [
                        {
                            "name": "embed",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_id",
                            "type": "str",
                            "value": "'damo/nlp_corom_sentence-embedding_english-base'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MosaicMLInstructorEmbeddings",
                    "args": [
                        {
                            "name": "endpoint_url",
                            "type": "str",
                            "value": "'https://models.hosted-on.mosaicml.hosting/instructor-xl/v1/predict'"
                        },
                        {
                            "name": "embed_instruction",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'Represent the document for retrieval",
                            "type": "'",
                            "value": ""
                        },
                        {
                            "name": "query_instruction",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'Represent the question for retrieving supporting documents",
                            "type": "'",
                            "value": ""
                        },
                        {
                            "name": "retry_sleep",
                            "type": "float",
                            "value": "1.0"
                        },
                        {
                            "name": "mosaicml_api_token",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "OpenAIEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model",
                            "type": "str",
                            "value": "'text-embedding-ada-002'"
                        },
                        {
                            "name": "deployment",
                            "type": "str",
                            "value": "'text-embedding-ada-002'"
                        },
                        {
                            "name": "openai_api_version",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_base",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_api_type",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_proxy",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "embedding_ctx_length",
                            "type": "int",
                            "value": "8191"
                        },
                        {
                            "name": "openai_api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "openai_organization",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "allowed_special",
                            "type": "Union[Literal['all'], Set[str]]",
                            "value": "set"
                        }
                    ],
                    "templates": [
                        {
                            "name": "default",
                            "installs": "",
                            "imports": "from langchain.embeddings import OpenAIEmbeddings",
                            "template": "\nembeddings = OpenAIEmbeddings(model=\"{model}\", embedding_ctx_length={embedding_ctx_length})\n            "
                        }
                    ]
                },
                {
                    "name": "SagemakerEndpointEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "endpoint_name",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "region_name",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "credentials_profile_name",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "content_handler",
                            "type": "langchain.embeddings.sagemaker_endpoint.EmbeddingsContentHandler",
                            "value": ""
                        },
                        {
                            "name": "model_kwargs",
                            "type": "Optional[Dict]",
                            "value": "None"
                        },
                        {
                            "name": "endpoint_kwargs",
                            "type": "Optional[Dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SelfHostedEmbeddings",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "pipeline_ref",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "inference_fn",
                            "type": "Callable",
                            "value": "<function _embed_documents at 0x7f41b87ee5f0>"
                        },
                        {
                            "name": "hardware",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_load_fn",
                            "type": "Callable",
                            "value": ""
                        },
                        {
                            "name": "load_fn_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "model_reqs",
                            "type": "List[str]",
                            "value": "['./', 'torch']"
                        },
                        {
                            "name": "inference_kwargs",
                            "type": "Any",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SelfHostedHuggingFaceEmbeddings",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "pipeline_ref",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "inference_fn",
                            "type": "Callable",
                            "value": "<function _embed_documents at 0x7fc5ba0ac3a0>"
                        },
                        {
                            "name": "hardware",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_load_fn",
                            "type": "Callable",
                            "value": "<function load_embedding_model at 0x7fc5ba0ac550>"
                        },
                        {
                            "name": "load_fn_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "model_reqs",
                            "type": "List[str]",
                            "value": "['./', 'sentence_transformers', 'torch']"
                        },
                        {
                            "name": "inference_kwargs",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_id",
                            "type": "str",
                            "value": "'sentence-transformers/all-mpnet-base-v2'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SelfHostedHuggingFaceInstructEmbeddings",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "cache",
                            "type": "Optional[bool]",
                            "value": "None"
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "None"
                        },
                        {
                            "name": "callbacks",
                            "type": "Union[List[langchain.callbacks.base.BaseCallbackHandler], langchain.callbacks.base.BaseCallbackManager, NoneType]",
                            "value": "None"
                        },
                        {
                            "name": "callback_manager",
                            "type": "Optional[langchain.callbacks.base.BaseCallbackManager]",
                            "value": "None"
                        },
                        {
                            "name": "tags",
                            "type": "Optional[List[str]]",
                            "value": "None"
                        },
                        {
                            "name": "pipeline_ref",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "inference_fn",
                            "type": "Callable",
                            "value": "<function _embed_documents at 0x7f15698c0310>"
                        },
                        {
                            "name": "hardware",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_load_fn",
                            "type": "Callable",
                            "value": "<function load_embedding_model at 0x7f15698c04c0>"
                        },
                        {
                            "name": "load_fn_kwargs",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "model_reqs",
                            "type": "List[str]",
                            "value": "['./', 'InstructorEmbedding', 'torch']"
                        },
                        {
                            "name": "inference_kwargs",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_id",
                            "type": "str",
                            "value": "'hkunlp/instructor-large'"
                        },
                        {
                            "name": "embed_instruction",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'Represent the document for retrieval",
                            "type": "'",
                            "value": ""
                        },
                        {
                            "name": "query_instruction",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'Represent the question for retrieving supporting documents",
                            "type": "'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SentenceTransformerEmbeddings",
                    "args": [],
                    "templates": []
                },
                {
                    "name": "TensorflowHubEmbeddings",
                    "args": [
                        {
                            "name": "embed",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "model_url",
                            "type": "str",
                            "value": "'https://tfhub.dev/google/universal-sentence-encoder-multilingual/3'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "VertexAIEmbeddings",
                    "args": [
                        {
                            "name": "client",
                            "type": "ForwardRef",
                            "value": ""
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "memory",
            "tag": "MEMORY",
            "path": "langchain.memory",
            "docs": "/modules/memory/how_to_guides.html",
            "options": [
                {
                    "name": "CassandraChatMessageHistory",
                    "args": [
                        {
                            "name": "contact_points",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "session_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "port",
                            "type": "int",
                            "value": "9042"
                        },
                        {
                            "name": "username",
                            "type": "str",
                            "value": "'cassandra'"
                        },
                        {
                            "name": "password",
                            "type": "str",
                            "value": "'cassandra'"
                        },
                        {
                            "name": "keyspace_name",
                            "type": "str",
                            "value": "'chat_history'"
                        },
                        {
                            "name": "table_name",
                            "type": "str",
                            "value": "'message_store'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ChatMessageHistory",
                    "args": [
                        {
                            "name": "messages",
                            "type": "List[langchain.schema.BaseMessage]",
                            "value": "[]"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "CombinedMemory",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memories",
                            "type": "List[langchain.schema.BaseMemory]",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConversationBufferMemory",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "chat_memory",
                            "type": "langchain.schema.BaseChatMessageHistory",
                            "value": "None"
                        },
                        {
                            "name": "output_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "input_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "return_messages",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "human_prefix",
                            "type": "str",
                            "value": "'Human'"
                        },
                        {
                            "name": "ai_prefix",
                            "type": "str",
                            "value": "'AI'"
                        },
                        {
                            "name": "memory_key",
                            "type": "str",
                            "value": "'history'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConversationBufferWindowMemory",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "chat_memory",
                            "type": "langchain.schema.BaseChatMessageHistory",
                            "value": "None"
                        },
                        {
                            "name": "output_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "input_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "return_messages",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "human_prefix",
                            "type": "str",
                            "value": "'Human'"
                        },
                        {
                            "name": "ai_prefix",
                            "type": "str",
                            "value": "'AI'"
                        },
                        {
                            "name": "memory_key",
                            "type": "str",
                            "value": "'history'"
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "5"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConversationEntityMemory",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "chat_memory",
                            "type": "langchain.schema.BaseChatMessageHistory",
                            "value": "None"
                        },
                        {
                            "name": "output_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "input_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "return_messages",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "human_prefix",
                            "type": "str",
                            "value": "'Human'"
                        },
                        {
                            "name": "ai_prefix",
                            "type": "str",
                            "value": "'AI'"
                        },
                        {
                            "name": "llm",
                            "type": "langchain.base_language.BaseLanguageModel",
                            "value": ""
                        },
                        {
                            "name": "entity_extraction_prompt",
                            "type": "langchain.prompts.base.BasePromptTemplate",
                            "value": "PromptTemplate"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConversationKGMemory",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "chat_memory",
                            "type": "langchain.schema.BaseChatMessageHistory",
                            "value": "None"
                        },
                        {
                            "name": "output_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "input_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "return_messages",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "2"
                        },
                        {
                            "name": "human_prefix",
                            "type": "str",
                            "value": "'Human'"
                        },
                        {
                            "name": "ai_prefix",
                            "type": "str",
                            "value": "'AI'"
                        },
                        {
                            "name": "kg",
                            "type": "langchain.graphs.networkx_graph.NetworkxEntityGraph",
                            "value": "None"
                        },
                        {
                            "name": "knowledge_extraction_prompt",
                            "type": "langchain.prompts.base.BasePromptTemplate",
                            "value": "PromptTemplate"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConversationStringBufferMemory",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "human_prefix",
                            "type": "str",
                            "value": "'Human'"
                        },
                        {
                            "name": "ai_prefix",
                            "type": "str",
                            "value": "'AI'"
                        },
                        {
                            "name": "buffer",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "output_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "input_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "memory_key",
                            "type": "str",
                            "value": "'history'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConversationSummaryBufferMemory",
                    "args": [
                        {
                            "name": "human_prefix",
                            "type": "str",
                            "value": "'Human'"
                        },
                        {
                            "name": "ai_prefix",
                            "type": "str",
                            "value": "'AI'"
                        },
                        {
                            "name": "llm",
                            "type": "langchain.base_language.BaseLanguageModel",
                            "value": ""
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.BasePromptTemplate",
                            "value": "PromptTemplate"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConversationSummaryMemory",
                    "args": [
                        {
                            "name": "human_prefix",
                            "type": "str",
                            "value": "'Human'"
                        },
                        {
                            "name": "ai_prefix",
                            "type": "str",
                            "value": "'AI'"
                        },
                        {
                            "name": "llm",
                            "type": "langchain.base_language.BaseLanguageModel",
                            "value": ""
                        },
                        {
                            "name": "prompt",
                            "type": "langchain.prompts.base.BasePromptTemplate",
                            "value": "PromptTemplate"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ConversationTokenBufferMemory",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "chat_memory",
                            "type": "langchain.schema.BaseChatMessageHistory",
                            "value": "None"
                        },
                        {
                            "name": "output_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "input_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "return_messages",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "human_prefix",
                            "type": "str",
                            "value": "'Human'"
                        },
                        {
                            "name": "ai_prefix",
                            "type": "str",
                            "value": "'AI'"
                        },
                        {
                            "name": "llm",
                            "type": "langchain.base_language.BaseLanguageModel",
                            "value": ""
                        },
                        {
                            "name": "memory_key",
                            "type": "str",
                            "value": "'history'"
                        },
                        {
                            "name": "max_token_limit",
                            "type": "int",
                            "value": "2000"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "CosmosDBChatMessageHistory",
                    "args": [
                        {
                            "name": "cosmos_endpoint",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "cosmos_database",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "cosmos_container",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "session_id",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "user_id",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "credential",
                            "type": "'Any'",
                            "value": "None"
                        },
                        {
                            "name": "connection_string",
                            "type": "'Optional[str]'",
                            "value": "None"
                        },
                        {
                            "name": "ttl",
                            "type": "'Optional[int]'",
                            "value": "None"
                        },
                        {
                            "name": "cosmos_client_kwargs",
                            "type": "'Optional[dict]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DynamoDBChatMessageHistory",
                    "args": [
                        {
                            "name": "table_name",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "session_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "endpoint_url",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "FileChatMessageHistory",
                    "args": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "InMemoryEntityStore",
                    "args": [
                        {
                            "name": "store",
                            "type": "Dict[str, Optional[str]]",
                            "value": "{}"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MomentoChatMessageHistory",
                    "args": [
                        {
                            "name": "session_id",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "cache_client",
                            "type": "'momento.CacheClient'",
                            "value": ""
                        },
                        {
                            "name": "cache_name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "key_prefix",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "'str' = 'message_store",
                            "type": "'",
                            "value": ""
                        },
                        {
                            "name": "ttl",
                            "type": "'Optional[timedelta]'",
                            "value": "None"
                        },
                        {
                            "name": "ensure_cache_exists",
                            "type": "'bool'",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MongoDBChatMessageHistory",
                    "args": [
                        {
                            "name": "connection_string",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "session_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "database_name",
                            "type": "str",
                            "value": "'chat_history'"
                        },
                        {
                            "name": "collection_name",
                            "type": "str",
                            "value": "'message_store'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PostgresChatMessageHistory",
                    "args": [
                        {
                            "name": "session_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "connection_string",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'postgresql",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "//postgres",
                            "type": "mypassword@localhost/chat_history'",
                            "value": ""
                        },
                        {
                            "name": "table_name",
                            "type": "str",
                            "value": "'message_store'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ReadOnlySharedMemory",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memory",
                            "type": "langchain.schema.BaseMemory",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "RedisChatMessageHistory",
                    "args": [
                        {
                            "name": "session_id",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "url",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'redis",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "//localhost",
                            "type": "6379/0'",
                            "value": ""
                        },
                        {
                            "name": "key_prefix",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'message_store",
                            "type": "'",
                            "value": ""
                        },
                        {
                            "name": "ttl",
                            "type": "Optional[int]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "RedisEntityStore",
                    "args": [
                        {
                            "name": "session_id",
                            "type": "str",
                            "value": "'default'"
                        },
                        {
                            "name": "url",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "str = 'redis",
                            "type": "",
                            "value": ""
                        },
                        {
                            "name": "//localhost",
                            "type": "6379/0'",
                            "value": ""
                        },
                        {
                            "name": "key_prefix",
                            "type": "str",
                            "value": "'memory_store'"
                        },
                        {
                            "name": "ttl",
                            "type": "Optional[int]",
                            "value": "86400"
                        },
                        {
                            "name": "recall_ttl",
                            "type": "Optional[int]",
                            "value": "259200"
                        },
                        {
                            "name": "*args",
                            "type": "Any",
                            "value": ""
                        },
                        {
                            "name": "redis_client",
                            "type": "Any",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SQLiteEntityStore",
                    "args": [
                        {
                            "name": "session_id",
                            "type": "str",
                            "value": "'default'"
                        },
                        {
                            "name": "db_file",
                            "type": "str",
                            "value": "'entities.db'"
                        },
                        {
                            "name": "table_name",
                            "type": "str",
                            "value": "'memory_store'"
                        },
                        {
                            "name": "*args",
                            "type": "Any",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SimpleMemory",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "memories",
                            "type": "Dict[str, Any]",
                            "value": "{}"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "VectorStoreRetrieverMemory",
                    "args": [
                        {
                            "name": "lc_kwargs",
                            "type": "Dict[str, Any]",
                            "value": "None"
                        },
                        {
                            "name": "retriever",
                            "type": "langchain.vectorstores.base.VectorStoreRetriever",
                            "value": ""
                        },
                        {
                            "name": "memory_key",
                            "type": "str",
                            "value": "'history'"
                        },
                        {
                            "name": "input_key",
                            "type": "Optional[str]",
                            "value": "None"
                        },
                        {
                            "name": "return_docs",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                }
            ]
        },
        {
            "name": "retrievers",
            "tag": "RETRIEVER",
            "path": "langchain.retrievers",
            "docs": "/modules/indexes/retrievers.html",
            "options": [
                {
                    "name": "ArxivRetriever",
                    "args": [
                        {
                            "name": "arxiv_search",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "arxiv_exceptions",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "top_k_results",
                            "type": "int",
                            "value": "3"
                        },
                        {
                            "name": "load_max_docs",
                            "type": "int",
                            "value": "100"
                        },
                        {
                            "name": "load_all_available_meta",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "doc_content_chars_max",
                            "type": "Optional[int]",
                            "value": "4000"
                        },
                        {
                            "name": "ARXIV_MAX_QUERY_LENGTH",
                            "type": "int",
                            "value": "300"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "AzureCognitiveSearchRetriever",
                    "args": [
                        {
                            "name": "service_name",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "index_name",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "api_key",
                            "type": "str",
                            "value": "''"
                        },
                        {
                            "name": "api_version",
                            "type": "str",
                            "value": "'2020-06-30'"
                        },
                        {
                            "name": "aiosession",
                            "type": "Optional[aiohttp.client.ClientSession]",
                            "value": "None"
                        },
                        {
                            "name": "content_key",
                            "type": "str",
                            "value": "'content'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ChatGPTPluginRetriever",
                    "args": [
                        {
                            "name": "url",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "bearer_token",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "top_k",
                            "type": "int",
                            "value": "3"
                        },
                        {
                            "name": "filter",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "aiosession",
                            "type": "Optional[aiohttp.client.ClientSession]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ContextualCompressionRetriever",
                    "args": [
                        {
                            "name": "base_compressor",
                            "type": "langchain.retrievers.document_compressors.base.BaseDocumentCompressor",
                            "value": ""
                        },
                        {
                            "name": "base_retriever",
                            "type": "langchain.schema.BaseRetriever",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "DataberryRetriever",
                    "args": [
                        {
                            "name": "datastore_url",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "top_k",
                            "type": "Optional[int]",
                            "value": "None"
                        },
                        {
                            "name": "api_key",
                            "type": "Optional[str]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ElasticSearchBM25Retriever",
                    "args": [
                        {
                            "name": "client",
                            "type": "'Any'",
                            "value": ""
                        },
                        {
                            "name": "index_name",
                            "type": "'str'",
                            "value": ""
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "KNNRetriever",
                    "args": [
                        {
                            "name": "embeddings",
                            "type": "langchain.embeddings.base.Embeddings",
                            "value": ""
                        },
                        {
                            "name": "index",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "texts",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "4"
                        },
                        {
                            "name": "relevancy_threshold",
                            "type": "Optional[float]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "MetalRetriever",
                    "args": [
                        {
                            "name": "client",
                            "type": "Any",
                            "value": ""
                        },
                        {
                            "name": "params",
                            "type": "Optional[dict]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "PineconeHybridSearchRetriever",
                    "args": [
                        {
                            "name": "embeddings",
                            "type": "langchain.embeddings.base.Embeddings",
                            "value": ""
                        },
                        {
                            "name": "sparse_encoder",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "index",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "top_k",
                            "type": "int",
                            "value": "4"
                        },
                        {
                            "name": "alpha",
                            "type": "float",
                            "value": "0.5"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "RemoteLangChainRetriever",
                    "args": [
                        {
                            "name": "url",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "headers",
                            "type": "Optional[dict]",
                            "value": "None"
                        },
                        {
                            "name": "input_key",
                            "type": "str",
                            "value": "'message'"
                        },
                        {
                            "name": "response_key",
                            "type": "str",
                            "value": "'response'"
                        },
                        {
                            "name": "page_content_key",
                            "type": "str",
                            "value": "'page_content'"
                        },
                        {
                            "name": "metadata_key",
                            "type": "str",
                            "value": "'metadata'"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SVMRetriever",
                    "args": [
                        {
                            "name": "embeddings",
                            "type": "langchain.embeddings.base.Embeddings",
                            "value": ""
                        },
                        {
                            "name": "index",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "texts",
                            "type": "List[str]",
                            "value": ""
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "4"
                        },
                        {
                            "name": "relevancy_threshold",
                            "type": "Optional[float]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "SelfQueryRetriever",
                    "args": [
                        {
                            "name": "vectorstore",
                            "type": "langchain.vectorstores.base.VectorStore",
                            "value": ""
                        },
                        {
                            "name": "llm_chain",
                            "type": "langchain.chains.llm.LLMChain",
                            "value": ""
                        },
                        {
                            "name": "search_type",
                            "type": "str",
                            "value": "'similarity'"
                        },
                        {
                            "name": "search_kwargs",
                            "type": "dict",
                            "value": "None"
                        },
                        {
                            "name": "structured_query_translator",
                            "type": "langchain.chains.query_constructor.ir.Visitor",
                            "value": ""
                        },
                        {
                            "name": "verbose",
                            "type": "bool",
                            "value": "False"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TFIDFRetriever",
                    "args": [
                        {
                            "name": "vectorizer",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "docs",
                            "type": "List[langchain.schema.Document]",
                            "value": ""
                        },
                        {
                            "name": "tfidf_array",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "4"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "TimeWeightedVectorStoreRetriever",
                    "args": [
                        {
                            "name": "vectorstore",
                            "type": "langchain.vectorstores.base.VectorStore",
                            "value": ""
                        },
                        {
                            "name": "search_kwargs",
                            "type": "dict",
                            "value": "None"
                        },
                        {
                            "name": "memory_stream",
                            "type": "List[langchain.schema.Document]",
                            "value": "None"
                        },
                        {
                            "name": "decay_rate",
                            "type": "float",
                            "value": "0.01"
                        },
                        {
                            "name": "k",
                            "type": "int",
                            "value": "4"
                        },
                        {
                            "name": "other_score_keys",
                            "type": "List[str]",
                            "value": "[]"
                        },
                        {
                            "name": "default_salience",
                            "type": "Optional[float]",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "VespaRetriever",
                    "args": [
                        {
                            "name": "app",
                            "type": "'Vespa'",
                            "value": ""
                        },
                        {
                            "name": "body",
                            "type": "'Dict'",
                            "value": ""
                        },
                        {
                            "name": "content_field",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "metadata_fields",
                            "type": "'Optional[Sequence[str]]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WeaviateHybridSearchRetriever",
                    "args": [
                        {
                            "name": "client",
                            "type": "'Any'",
                            "value": ""
                        },
                        {
                            "name": "index_name",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "text_key",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "alpha",
                            "type": "'float'",
                            "value": "0.5"
                        },
                        {
                            "name": "k",
                            "type": "'int'",
                            "value": "4"
                        },
                        {
                            "name": "attributes",
                            "type": "'Optional[List[str]]'",
                            "value": "None"
                        },
                        {
                            "name": "create_schema_if_missing",
                            "type": "'bool'",
                            "value": "True"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "WikipediaRetriever",
                    "args": [
                        {
                            "name": "wiki_client",
                            "type": "Any",
                            "value": "None"
                        },
                        {
                            "name": "top_k_results",
                            "type": "int",
                            "value": "3"
                        },
                        {
                            "name": "lang",
                            "type": "str",
                            "value": "'en'"
                        },
                        {
                            "name": "load_all_available_meta",
                            "type": "bool",
                            "value": "False"
                        },
                        {
                            "name": "doc_content_chars_max",
                            "type": "int",
                            "value": "4000"
                        }
                    ],
                    "templates": []
                },
                {
                    "name": "ZepRetriever",
                    "args": [
                        {
                            "name": "session_id",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "url",
                            "type": "'str'",
                            "value": ""
                        },
                        {
                            "name": "top_k",
                            "type": "'Optional[int]'",
                            "value": "None"
                        }
                    ],
                    "templates": []
                }
            ]
        }
    ]
}